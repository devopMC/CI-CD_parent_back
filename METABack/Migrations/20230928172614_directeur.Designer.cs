// <auto-generated />
using System;
using METABack.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace METABack.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230928172614_directeur")]
    partial class directeur
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EtablissementAnomalieEtablissement", b =>
                {
                    b.Property<int>("Nume")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeAnom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.HasKey("Nume", "CodeEtab", "AnneScol", "CodeAnom");

                    b.HasIndex("CodeAnom");

                    b.ToTable("Etablissement_AnomalieEtablissement", (string)null);
                });

            modelBuilder.Entity("InspectionAnomalie", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeAnom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeAnom");

                    b.HasIndex("CodeAnom");

                    b.ToTable("Inspection_Anomalie", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ActiviteFiche", b =>
                {
                    b.Property<int>("CodeAct")
                        .HasColumnType("int")
                        .HasColumnName("codeAct");

                    b.Property<string>("ActiviteAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("CodeNatAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DateAct")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("LieuAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbFemme")
                        .HasColumnType("int");

                    b.Property<int?>("NbHomme")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SujetAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typepart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeAct");

                    b.ToTable("Activite_fiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ActiviteParaticipant", b =>
                {
                    b.Property<int?>("CodeAct")
                        .HasColumnType("int")
                        .HasColumnName("codeAct");

                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Activite_paraticipant", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveEleveHandicap", b =>
                {
                    b.Property<int>("NumeElev")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<int?>("AnneNais")
                        .HasColumnType("int");

                    b.Property<string>("CodeDegrHand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGenr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code genre");

                    b.Property<string>("CodeInteHand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeHand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<string>("NomPren")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("SuiviCentSpec")
                        .HasColumnType("bit");

                    b.HasKey("NumeElev", "CodeEtab", "AnneScol");

                    b.HasIndex("CodeDegrHand");

                    b.HasIndex("CodeGenr");

                    b.HasIndex("CodeInteHand");

                    b.HasIndex("CodeTypeHand");

                    b.HasIndex("CodeEtab", "AnneScol");

                    b.ToTable("Eleve_EleveHandicap", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionEtatParent", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeEtatPare")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeEtatPare");

                    b.HasIndex("CodeEtatPare");

                    b.ToTable("Eleve_RepartitionEtatParents", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionEtatPsycologique", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeEtatPsyc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeEtatPsyc");

                    b.HasIndex("CodeEtatPsyc");

                    b.ToTable("Eleve_RepartitionEtatPsycologique", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionEtatSante", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeEtatSant")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeEtatSant");

                    b.HasIndex("CodeEtatSant");

                    b.ToTable("Eleve_RepartitionEtatSante", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionGroupeTrancheAge", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombGrou")
                        .HasColumnType("int");

                    b.Property<int?>("NombPersPourGrou")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTranAge");

                    b.HasIndex("CodeTranAge");

                    b.ToTable("Eleve_RepartitionGroupeTrancheAge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionGroupeTrancheAgeOld01122020", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombGrou")
                        .HasColumnType("int");

                    b.Property<int?>("NombPersPourGrou")
                        .HasColumnType("int");

                    b.ToTable("Eleve_RepartitionGroupeTrancheAge_old01122020", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionGroupeTrancheAgeOld02122020", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombGrou")
                        .HasColumnType("int");

                    b.Property<int?>("NombPersPourGrou")
                        .HasColumnType("int");

                    b.ToTable("Eleve_RepartitionGroupeTrancheAge_old02122020", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionLangueMaternelle", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeLangMate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeLangMate");

                    b.HasIndex("CodeLangMate");

                    b.ToTable("Eleve_RepartitionLangueMaternelle", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNationalite", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeNati")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeNati");

                    b.HasIndex("CodeNati");

                    b.ToTable("Eleve_RepartitionNationalite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNiveauEtudeMere", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeNiveEtud");

                    b.HasIndex("CodeNiveEtud");

                    b.ToTable("Eleve_RepartitionNiveauEtudeMere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNiveauEtudePere", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeNiveEtud");

                    b.HasIndex("CodeNiveEtud");

                    b.ToTable("Eleve_RepartitionNiveauEtudePere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNiveauSalaire", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeNiveSala")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeNiveSala");

                    b.HasIndex("CodeNiveSala");

                    b.ToTable("Eleve_RepartitionNiveauSalaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionProfessionMere", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeProf");

                    b.HasIndex("CodeProf");

                    b.ToTable("Eleve_RepartitionProfessionMere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionProfessionPere", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeProf");

                    b.HasIndex("CodeProf");

                    b.ToTable("Eleve_RepartitionProfessionPere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAge", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeGrou")
                        .HasColumnType("int");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTranAge", "NumeGrou");

                    b.ToTable("Eleve_RepartitionTrancheAge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeArretEtude", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTranAge");

                    b.HasIndex("CodeTranAge");

                    b.ToTable("Eleve_RepartitionTrancheAgeArretEtude", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeBeneficaire", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTranAge");

                    b.HasIndex("CodeTranAge");

                    b.ToTable("Eleve_RepartitionTrancheAgeBeneficaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeOld02122020", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int>("NumeGrou")
                        .HasColumnType("int");

                    b.ToTable("Eleve_RepartitionTrancheAge_old02122020", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeTypePriseEnCharge", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypePrisChar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTranAge", "CodeTypePrisChar");

                    b.HasIndex("CodeTranAge");

                    b.HasIndex("CodeTypePrisChar");

                    b.ToTable("Eleve_RepartitionTrancheAgeTypePriseEnCharge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTypeInscription", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeTypeInsc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTypeInsc");

                    b.HasIndex("CodeTypeInsc");

                    b.ToTable("Eleve_RepartitionTypeInscription", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTypePriseEnCharge", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeTypePrisChar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Niveau d'Etude");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTypePrisChar");

                    b.HasIndex("CodeTypePrisChar");

                    b.ToTable("Eleve_RepartitionTypePriseEnCharge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EnfantNecessite", b =>
                {
                    b.Property<int>("Idenfant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idenfant");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idenfant"), 1L, 1);

                    b.Property<int?>("Activ")
                        .HasColumnType("int");

                    b.Property<string>("AdrePers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Anniscription")
                        .HasColumnType("int");

                    b.Property<string>("CodeComm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCommEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDeleEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodenatPere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codenatPere");

                    b.Property<string>("CodeutilAdd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CodeutilADD");

                    b.Property<string>("CodeutilSup")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilUpdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateAjout")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datesup")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateupdate")
                        .HasColumnType("datetime");

                    b.Property<string>("EtatFamille")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EtatSante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LieuNais")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NbAnne")
                        .HasColumnType("int");

                    b.Property<string>("Nompere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nompere");

                    b.Property<string>("Nomprenom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nomprenom");

                    b.Property<string>("NumTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeCin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NumeCIN");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idenfant")
                        .HasName("PK_Famille_necessite");

                    b.HasIndex("CodeComm");

                    b.HasIndex("CodeDele");

                    b.HasIndex("CodeTypeEtab");

                    b.ToTable("ENFANT_necessite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementAnomalie", b =>
                {
                    b.Property<int>("Nume")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("Codeutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL")
                        .HasComment("Code commerciale (Login)");

                    b.Property<DateTime?>("DateVisi")
                        .HasColumnType("datetime");

                    b.Property<string>("DurePrisEnCharg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nume", "CodeEtab", "AnneScol");

                    b.HasIndex("Codeutil");

                    b.HasIndex("CodeEtab", "AnneScol");

                    b.ToTable("Etablissement_Anomalie", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementClub", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeTypeClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<int?>("Nbseance")
                        .HasColumnType("int")
                        .HasColumnName("nbseance");

                    b.Property<string>("NomClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeTypeClub");

                    b.ToTable("Etablissement_Club", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementClubGeneral", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol");

                    b.ToTable("Etablissement_ClubGeneral", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementClubGeneral05012022", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Etablissement_ClubGeneral_05012022", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEnfantNe", b =>
                {
                    b.Property<bool?>("Activ")
                        .HasColumnType("bit")
                        .HasColumnName("activ");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilMod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilMod");

                    b.Property<string>("Codeutiladd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutiladd");

                    b.Property<DateTime?>("DateMod")
                        .HasColumnType("datetime")
                        .HasColumnName("dateMod");

                    b.Property<DateTime?>("Datearret")
                        .HasColumnType("date")
                        .HasColumnName("datearret");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime")
                        .HasColumnName("datecreation");

                    b.Property<DateTime>("Dateinscrit")
                        .HasColumnType("date")
                        .HasColumnName("dateinscrit");

                    b.Property<int>("Idenfant")
                        .HasColumnType("int")
                        .HasColumnName("idenfant");

                    b.Property<string>("Motifarret")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("motifarret");

                    b.ToTable("Etablissement_EnfantNE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEquipement", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEqui")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ConfCara")
                        .HasColumnType("bit");

                    b.Property<bool>("ConfCaraType")
                        .HasColumnType("bit");

                    b.Property<bool?>("Disp")
                        .HasColumnType("bit");

                    b.Property<bool>("DispType")
                        .HasColumnType("bit");

                    b.Property<int?>("Nomb")
                        .HasColumnType("int");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObseType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeEtab", "AnneScol", "CodeEqui");

                    b.HasIndex("CodeEqui");

                    b.ToTable("Etablissement_Equipement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEspace", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<int>("NumeEspa")
                        .HasColumnType("int");

                    b.Property<string>("CodeTypeEspa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Type Equipement");

                    b.Property<double?>("Haut")
                        .HasColumnType("float");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surf")
                        .HasColumnType("float");

                    b.HasKey("CodeEtab", "AnneScol", "NumeEspa")
                        .HasName("PK_Etablissement_Espace_1");

                    b.HasIndex("CodeTypeEspa");

                    b.ToTable("Etablissement_Espace", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEspaceCaracteristiqueEspace", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<int>("NumeEspa")
                        .HasColumnType("int");

                    b.Property<string>("CodeCaraEspa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ConfCara")
                        .HasColumnType("bit");

                    b.HasKey("CodeEtab", "AnneScol", "NumeEspa", "CodeCaraEspa");

                    b.HasIndex("CodeCaraEspa");

                    b.ToTable("Etablissement_EspaceCaracteristiqueEspace", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementFicheEtablissement", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Adresse de l'établissement");

                    b.Property<string>("Capacite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("capacite");

                    b.Property<bool?>("ChangementAdresse")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChangementDitecteur")
                        .HasColumnType("bit");

                    b.Property<string>("CodeComm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeOuveEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePersDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Directeur de l'établissement");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code postal");

                    b.Property<bool?>("CreationEtatb")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMail")
                        .HasComment("Adresse électronique");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Fax");

                    b.Property<double?>("FraiInscParAnne")
                        .HasColumnType("float")
                        .HasComment("Frais inscription par année");

                    b.Property<double?>("FraiMensActiNorm")
                        .HasColumnType("float")
                        .HasComment("Frais mensuel de l'activité normale");

                    b.Property<double?>("FraiMensPepi")
                        .HasColumnType("float")
                        .HasComment("Frais mensuel de l'activité normale");

                    b.Property<double?>("FraiMesuCont")
                        .HasColumnType("float")
                        .HasComment("Frais mensuel de l'activité normale");

                    b.Property<string>("HeureDebutS1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HeureDebutS2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HeureFinS1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HeureFinS2")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SiteWeb")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Site web");

                    b.Property<string>("TeleFixe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Téléphone fixe");

                    b.HasKey("CodeEtab", "AnneScol")
                        .HasName("PK_Etablissement_FicheEtablissement_1");

                    b.HasIndex("CodeDele");

                    b.HasIndex("CodeOuveEtab");

                    b.ToTable("Etablissement_FicheEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementHistoriqueEtatEtab", b =>
                {
                    b.Property<string>("AdresseEtablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<bool?>("ChangementAdresse")
                        .HasColumnType("bit");

                    b.Property<bool?>("ChangementDitecteur")
                        .HasColumnType("bit");

                    b.Property<string>("Cinresponsable")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CINResponsable");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilisateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilisateur");

                    b.Property<bool?>("CreationEtatb")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateModif")
                        .HasColumnType("datetime");

                    b.ToTable("Etablissement_HistoriqueEtatEtab", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementInfrastructure", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("AutrEmplSieg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("غير ذلك حدده");

                    b.Property<bool?>("Clot")
                        .HasColumnType("bit")
                        .HasComment("المؤسسة محاطة بسياج");

                    b.Property<string>("CodeEmplSieg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("مقرّ المؤسسة");

                    b.Property<string>("CodeRegiProp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("ملكية العقار");

                    b.Property<string>("CodeTypeClot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("نوع السياج");

                    b.Property<string>("CodeTypeProp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("نوع العقار");

                    b.Property<string>("CodeTypeTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ConnInte")
                        .HasColumnType("bit")
                        .HasComment("المؤسسة مرتبطة بشبكة الأنترنات");

                    b.Property<bool?>("ExistTerrain")
                        .HasColumnType("bit")
                        .HasColumnName("existTerrain");

                    b.Property<double?>("HautClot")
                        .HasColumnType("float")
                        .HasComment("ارتفاع السياج");

                    b.Property<bool?>("PassSpecPersBesoSpec")
                        .HasColumnType("bit")
                        .HasComment("يوجد ممر خاص بذوي الاحتياجات الخصوصية");

                    b.Property<double?>("SurfBati")
                        .HasColumnType("float")
                        .HasComment("المساحة المغطاة");

                    b.Property<double?>("SurfEspaExte")
                        .HasColumnType("float")
                        .HasComment("مساحة الفضاء الخارجي");

                    b.Property<double?>("SurfTota")
                        .HasColumnType("float")
                        .HasComment("المساحةالجملية");

                    b.Property<string>("SurfaceTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("TeleFixe")
                        .HasColumnType("bit")
                        .HasComment("هاتف قار");

                    b.HasKey("CodeEtab", "AnneScol");

                    b.HasIndex("CodeEmplSieg");

                    b.HasIndex("CodeRegiProp");

                    b.HasIndex("CodeTypeClot");

                    b.HasIndex("CodeTypeProp");

                    b.ToTable("Etablissement_Infrastructure", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementInfrastructureAutre", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodetypeInfra")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.HasKey("CodeEtab", "AnneScol", "CodetypeInfra");

                    b.HasIndex("CodetypeInfra");

                    b.ToTable("Etablissement_Infrastructure_Autre", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementIntervention", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeInterv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeEtab", "AnneScol", "CodeInterv");

                    b.HasIndex("CodeInterv");

                    b.ToTable("Etablissement_Intervention", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementLienexterne", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeLienExterne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeEtab", "AnneScol", "CodeLienExterne");

                    b.ToTable("Etablissement_lienexterne", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementOrganisationAdministrative", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeOrgaAdmi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool>("Ajour")
                        .HasColumnType("bit")
                        .HasColumnName("AJour");

                    b.Property<bool>("Disp")
                        .HasColumnType("bit");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeOrgaAdmi");

                    b.HasIndex("CodeOrgaAdmi");

                    b.ToTable("Etablissement_OrganisationAdministrative", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementOrganisationPedagogique", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeOrgaPeda")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool>("Ajour")
                        .HasColumnType("bit")
                        .HasColumnName("AJour");

                    b.Property<bool>("Disp")
                        .HasColumnType("bit");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeOrgaPeda")
                        .HasName("PK_Etablissement_OrganisationPedagogique_1");

                    b.HasIndex("CodeOrgaPeda");

                    b.ToTable("Etablissement_OrganisationPedagogique", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EtablissementTerrain", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeEtab", "AnneScol", "CodeTerrain");

                    b.ToTable("Etablissement_Terrain", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EventFiche", b =>
                {
                    b.Property<int>("CodeEvent")
                        .HasColumnType("int")
                        .HasColumnName("codeEvent");

                    b.Property<string>("ActiviteEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DateEvent")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("InvesEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbFemmeC")
                        .HasColumnType("int");

                    b.Property<int?>("NbFemmeE")
                        .HasColumnType("int");

                    b.Property<int?>("NbHommeC")
                        .HasColumnType("int");

                    b.Property<int?>("NbHommeE")
                        .HasColumnType("int");

                    b.Property<string>("NomEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrixEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeEvent");

                    b.ToTable("Event_fiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.EventParaticipant", b =>
                {
                    b.Property<int?>("CodeEvent")
                        .HasColumnType("int")
                        .HasColumnName("codeEvent");

                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Event_paraticipant", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.FormationCorp", b =>
                {
                    b.Property<string>("CodeCorps")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.ToTable("Formation_Corps", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.FormationFiche", b =>
                {
                    b.Property<int>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.Property<string>("Activiteformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("ButFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeCerc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNatFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNatFormateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateformation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("Inspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvesFormation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieurFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbFemme")
                        .HasColumnType("int");

                    b.Property<int?>("NbHomme")
                        .HasColumnType("int");

                    b.Property<int?>("NbJourFomration")
                        .HasColumnType("int");

                    b.Property<int?>("NbheureFormation")
                        .HasColumnType("int");

                    b.Property<string>("NomFormateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrixFormation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SujetFormation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Codeformation")
                        .HasName("PK_Formation_Fiche");

                    b.ToTable("Formation_fiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.FormationInspecteur", b =>
                {
                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.ToTable("Formation_Inspecteur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.FormationParaticipant", b =>
                {
                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.ToTable("Formation_paraticipant", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.FormationTypeEtablissement", b =>
                {
                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.ToTable("Formation_TypeEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InfrastructureCaracteristiqueEspaceExterieur", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeCaraEspaExte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.HasIndex("CodeCaraEspaExte");

                    b.HasIndex("CodeEtab", "AnneScol");

                    b.ToTable("Infrastructure_CaracteristiqueEspaceExterieur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InfrastructureEmplacement", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeEmpl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.HasIndex("CodeEmpl");

                    b.HasIndex("CodeEtab", "AnneScol");

                    b.ToTable("Infrastructure_Emplacement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InfrastructureTypeConnexionInternet", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int")
                        .HasComment("Année scolaire");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<string>("CodeTypeConnInte")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.HasIndex("CodeTypeConnInte");

                    b.HasIndex("CodeEtab", "AnneScol");

                    b.ToTable("Infrastructure_TypeConnexionInternet", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionClub", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeClub")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeClub")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<int?>("Nbseance")
                        .HasColumnType("int")
                        .HasColumnName("nbseance");

                    b.Property<string>("NomClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Inspection_Club", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionConstatation", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCons")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeRubrInsp");

                    b.HasIndex("CodeRubrInsp");

                    b.ToTable("Inspection_Constatation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionDeductionCategorieRubriqueInspection", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeCateRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Dedu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeCateRubrInsp");

                    b.HasIndex("CodeCateRubrInsp");

                    b.ToTable("Inspection_DeductionCategorieRubriqueInspection", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionElevePresent", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeElevePresent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeElevePresent")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeElevePresent");

                    b.ToTable("Inspection_ElevePresent", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionEnfantNe", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DateNais")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Dateinscrit")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("dateinscrit");

                    b.Property<int>("Idenfant")
                        .HasColumnType("int")
                        .HasColumnName("idenfant");

                    b.Property<string>("Nompere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nompere");

                    b.Property<string>("Nomprenom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nomprenom");

                    b.Property<string>("NumTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToTable("Inspection_EnfantNE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionEquipement", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<long>("NumeEqui")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ConfCara")
                        .HasColumnType("bit");

                    b.Property<bool?>("Disp")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeEqui")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "NumeEqui");

                    b.ToTable("Inspection_Equipement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionEspace", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("NumeEspa")
                        .HasColumnType("int");

                    b.Property<int?>("ConfCara")
                        .HasColumnType("int");

                    b.Property<double?>("Haut")
                        .HasColumnType("float");

                    b.Property<string>("LibeTypeEspa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surf")
                        .HasColumnType("float");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "NumeEspa");

                    b.ToTable("Inspection_espace", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionFichierJoint", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("NumeFichJoin")
                        .HasColumnType("int");

                    b.Property<string>("CodeUtil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateOper")
                        .HasColumnType("datetime");

                    b.Property<string>("PhysNameFile")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UploNameFile")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "NumeFichJoin");

                    b.ToTable("Inspection_FichierJoint", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionInfoGenerale", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateCrea")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDepoCahiChar")
                        .HasColumnType("datetime");

                    b.Property<bool>("DepoCahiCharPrep")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPrenDire")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomPrenFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumePiecIden")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumePiecIdenDire")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TeleFixe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol");

                    b.ToTable("Inspection_InfoGenerale", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionInfrastructure", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("AutrEmplSieg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("Clot")
                        .HasColumnType("bit");

                    b.Property<string>("CodeEmplSieg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ExistTerrain")
                        .HasColumnType("bit")
                        .HasColumnName("existTerrain");

                    b.Property<double?>("HautClot")
                        .HasColumnType("float");

                    b.Property<string>("LibeCaraEspaExte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEmpl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEmplSieg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeClot")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeConnInte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeProp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<bool?>("PassSpecPersBesoSpec")
                        .HasColumnType("bit");

                    b.Property<double?>("SurfBati")
                        .HasColumnType("float");

                    b.Property<double?>("SurfEspaExte")
                        .HasColumnType("float");

                    b.Property<double?>("SurfTota")
                        .HasColumnType("float");

                    b.Property<string>("SurfaceTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("TeleFixe")
                        .HasColumnType("bit");

                    b.HasIndex("NumeVisiInsp", "CodeEtab", "AnneScol");

                    b.ToTable("Inspection_Infrastructure", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionInfrastructureAutre", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodetypeInfra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lbchecked")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("LBChecked");

                    b.Property<string>("LibeInfrastrcture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToTable("Inspection_Infrastructure_Autre", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionIntervention", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInterv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeInterv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeInterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Inspection_intervention", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionLienexterne", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeLienExterne")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeLienExterne")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Inspection_Lienexterne", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionNiveauEtude", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeNivEle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNivEle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Nombenfant")
                        .HasColumnType("int");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeNivEle");

                    b.ToTable("Inspection_NiveauEtude", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionNombreEnfantTrancheAge", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombEnfa")
                        .HasColumnType("int");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeTranAge");

                    b.HasIndex("CodeTranAge");

                    b.ToTable("Inspection_NombreEnfantTrancheAge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRecification", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeRect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Etat")
                        .HasColumnType("bit");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "CodeRect");

                    b.HasIndex("CodeRect");

                    b.ToTable("Inspection_Recifications", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionHandicap", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("LibeTypeHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "LibeTypeHand");

                    b.ToTable("Inspection_RepartitionHandicap", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionPersonel", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("IdenUniq")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dateaffectation")
                        .HasColumnType("date")
                        .HasColumnName("dateaffectation");

                    b.Property<string>("DatenotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("datenotePead");

                    b.Property<DateTime?>("Daterecrutement")
                        .HasColumnType("date")
                        .HasColumnName("daterecrutement");

                    b.Property<DateTime?>("Daterespons")
                        .HasColumnType("date")
                        .HasColumnName("daterespons");

                    b.Property<string>("IdenUniqMatrCnss")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGrad")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNiveEtud")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPren")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notePead");

                    b.Property<string>("StructureAttache")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "IdenUniq");

                    b.ToTable("Inspection_RepartitionPersonel", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionPersonelFonction", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("LibeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "LibeFonc");

                    b.ToTable("Inspection_RepartitionPersonelFonction", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionTrancheAge", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol", "LibeTranAge");

                    b.ToTable("Inspection_RepartitionTrancheAge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionTrancheAgeArretEtude", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToTable("Inspection_RepartitionTrancheAgeArretEtude", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionTrancheAgeBeneficaire", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToTable("Inspection_RepartitionTrancheAgeBeneficaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionTrancheAgeTypePriseEnCharge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeTypePrisChar");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToTable("Inspection_RepartitionTrancheAgeTypePriseEnCharge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionTypePriseEnCharge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeTypePrisChar");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToTable("Inspection_RepartitionTypePriseEnCharge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.InspectionVisiteInspection", b =>
                {
                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int?>("AnneScolPers")
                        .HasColumnType("int");

                    b.Property<string>("Capacite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("capacite");

                    b.Property<string>("Chefvue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("chefvue");

                    b.Property<string>("CodeActivite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtabPers")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilConfirmation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilConfirmation");

                    b.Property<int?>("DateLimiCorr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateProcVisi")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateVisiInsp")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateconfirmationMaj")
                        .HasColumnType("date")
                        .HasColumnName("dateconfirmationMAJ");

                    b.Property<DateTime?>("DatedemandeMaj")
                        .HasColumnType("date")
                        .HasColumnName("datedemandeMAJ");

                    b.Property<DateTime?>("Datemail")
                        .HasColumnType("datetime")
                        .HasColumnName("datemail");

                    b.Property<DateTime?>("Datesaisie")
                        .HasColumnType("date")
                        .HasColumnName("datesaisie");

                    b.Property<DateTime?>("Datevalidation")
                        .HasColumnType("datetime")
                        .HasColumnName("datevalidation");

                    b.Property<DateTime?>("Datevue")
                        .HasColumnType("datetime")
                        .HasColumnName("datevue");

                    b.Property<string>("DeduGene")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Arabic_CI_AS");

                    b.Property<int?>("DemandeMaj")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DemandeMAJ")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("DetaAnom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinSaisie")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdenUniqPers")
                        .HasColumnType("int");

                    b.Property<string>("Inspecteur2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Inspecteurvalide")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("inspecteurvalide");

                    b.Property<string>("JustDeciFerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MembCommTitu")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MotifMaj")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MotifMAJ");

                    b.Property<int?>("NombEnfaInscFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombEnfaInscMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombEnfaPresFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombEnfaPresMasc")
                        .HasColumnType("int");

                    b.Property<double?>("Note")
                        .HasColumnType("float");

                    b.Property<string>("NoteEnLettre")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PriseRemaq")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("RemaSuivActi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_Acti");

                    b.Property<string>("RemaSuivCondSecu")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_CondSecu");

                    b.Property<string>("RemaSuivInfr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_Infr");

                    b.Property<string>("RemaSuivPers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_Pers");

                    b.Property<string>("RemaSuivProgPeda")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_ProgPeda");

                    b.Property<string>("RemaSuivSujet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RemaSuiv_Sujet");

                    b.Property<string>("RemarqueInsp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Statut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("VisiPerSuivActi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NumeVisiInsp", "CodeEtab", "AnneScol");

                    b.HasIndex("CodeTypeInsp");

                    b.HasIndex(new[] { "CodeEtab", "AnneScol" }, "index_Etab_anne");

                    b.ToTable("Inspection_VisiteInspection", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.MessageFichier", b =>
                {
                    b.Property<string>("Extension")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("extension");

                    b.Property<byte[]>("Fichier")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("IdMessage")
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    b.Property<string>("Nomfichier")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("nomfichier");

                    b.Property<string>("Observation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("IdMessage");

                    b.ToTable("Message_Fichier", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.MessageGroupe", b =>
                {
                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGroup")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdMessage")
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("IdMessage");

                    b.ToTable("Message_Groupe", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.MessageMessage", b =>
                {
                    b.Property<int>("IdMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMessage"), 1L, 1);

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeTypeM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeUtilFrom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutil");

                    b.Property<DateTime?>("DateEnvoi")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdmessageParent")
                        .HasColumnType("int")
                        .HasColumnName("Idmessage_Parent");

                    b.Property<bool?>("Priority")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("Titre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMessage");

                    b.HasIndex("CodeTypeM");

                    b.ToTable("Message_Message", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.MessageRecuuser", b =>
                {
                    b.Property<int>("Idmessage")
                        .HasColumnType("int")
                        .HasColumnName("idmessage");

                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Daterecu")
                        .HasColumnType("datetime")
                        .HasColumnName("daterecu");

                    b.HasKey("Idmessage", "CodeUtil");

                    b.ToTable("message_recuuser", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.MessageUser", b =>
                {
                    b.Property<int>("IdMessage")
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Datereception")
                        .HasColumnType("datetime");

                    b.Property<int?>("Lu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lu")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdMessage", "CodeUtil");

                    b.ToTable("Message_User", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureActivite", b =>
                {
                    b.Property<string>("Codeactivite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<int?>("Afficheeleve")
                        .HasColumnType("int")
                        .HasColumnName("afficheeleve");

                    b.Property<int?>("Afficheniveau")
                        .HasColumnType("int")
                        .HasColumnName("afficheniveau");

                    b.Property<string>("Libeactivite")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("Codeactivite");

                    b.ToTable("Nomenclature_activite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureAnomalie", b =>
                {
                    b.Property<string>("CodeAnom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeAnom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeAnom");

                    b.ToTable("Nomenclature_Anomalie", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCaracteristiqueEspace", b =>
                {
                    b.Property<string>("CodeCaraEspa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTypeEspa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeCaraEspa")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeCaraEspa");

                    b.HasIndex("CodeTypeEspa");

                    b.ToTable("Nomenclature_CaracteristiqueEspace", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCaracteristiqueEspaceExterieur", b =>
                {
                    b.Property<string>("CodeCaraEspaExte")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeCaraEspaExte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeCaraEspaExte");

                    b.ToTable("Nomenclature_CaracteristiqueEspaceExterieur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCategorieRubriqueActivite", b =>
                {
                    b.Property<string>("Codeactivite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCateRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Codeactivite", "CodeCateRubrInsp");

                    b.ToTable("Nomenclature_CategorieRubriqueActivite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCategorieRubriqueInspection", b =>
                {
                    b.Property<string>("CodeCateRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code type établissement");

                    b.Property<string>("LibeCateRubrInsp")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeCateRubrInsp");

                    b.HasIndex("CodeTypeEtab");

                    b.ToTable("Nomenclature_CategorieRubriqueInspection", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCercle", b =>
                {
                    b.Property<string>("CodeCerc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeCerc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeCerc");

                    b.ToTable("Nomenclature_Cercle", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureClub", b =>
                {
                    b.Property<string>("CodeClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeClub")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeClub");

                    b.ToTable("Nomenclature_Club", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCommune", b =>
                {
                    b.Property<string>("CodeComm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeComm");

                    b.ToTable("Nomenclature_Commune", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureConcerne", b =>
                {
                    b.Property<string>("CodeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeConcerne");

                    b.ToTable("Nomenclature_Concerne", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureConstatation", b =>
                {
                    b.Property<string>("CodeCons")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeCons")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeCons");

                    b.ToTable("Nomenclature_Constatation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCorp", b =>
                {
                    b.Property<string>("CodeCorp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code corps");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeCorp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé corps(Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeCorp");

                    b.ToTable("Nomenclature_Corps", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCouverture", b =>
                {
                    b.Property<string>("Annescol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("annescol");

                    b.Property<string>("CodeTranCouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codegouv");

                    b.Property<string>("Couverture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("couverture");

                    b.ToTable("Nomenclature_Couverture", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDecisionReclamation", b =>
                {
                    b.Property<string>("CodeReclDeci")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeReclDeci")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeReclDeci");

                    b.ToTable("Nomenclature_DecisionReclamation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDedreHandicap", b =>
                {
                    b.Property<string>("CodeDegrHand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeDegrHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeDegrHand");

                    b.ToTable("Nomenclature_DedreHandicap", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDelegation", b =>
                {
                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code délégation");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code gouvernorat");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé délégation");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeDele");

                    b.HasIndex("CodeGouv");

                    b.ToTable("Nomenclature_Delegation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDiplome", b =>
                {
                    b.Property<string>("CodeDipl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code diplome");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeDipl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Libellé diplome (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeDipl");

                    b.ToTable("Nomenclature_Diplome", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDistrict", b =>
                {
                    b.Property<string>("CodeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code district");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé district");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeDist");

                    b.ToTable("Nomenclature_District", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureElevePresent", b =>
                {
                    b.Property<string>("CodeElevePresent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeElevePresent")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeElevePresent");

                    b.ToTable("Nomenclature_ElevePresent", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEmplacementEtablissement", b =>
                {
                    b.Property<string>("CodeEmpl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEmpl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEmpl")
                        .HasName("PK_Nomenclature_Emplacement");

                    b.ToTable("Nomenclature_EmplacementEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEmplacementSiege", b =>
                {
                    b.Property<string>("CodeEmplSieg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEmplSieg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEmplSieg");

                    b.ToTable("Nomenclature_EmplacementSiege", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEquipement", b =>
                {
                    b.Property<string>("CodeEqui")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CaraEqui")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Arabic_CI_AS");

                    b.Property<string>("CodeTypeEqui")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEqui")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEqui");

                    b.HasIndex("CodeTypeEqui");

                    b.ToTable("Nomenclature_Equipement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtablissement", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<string>("AdreEtab")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AdrePersFond")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Adresse personnel fondateur");

                    b.Property<string>("CausFerm")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CodeComm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<string>("CodeCommEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Délégation");

                    b.Property<string>("CodeDeleFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Délégation fondateur");

                    b.Property<string>("CodeDipl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Diplome");

                    b.Property<string>("CodeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGenrFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Genre");

                    b.Property<string>("CodeMiniFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Niveau d'Etude");

                    b.Property<string>("CodePostEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePostFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code postale");

                    b.Property<string>("CodeSect")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Secteur");

                    b.Property<string>("CodeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code genre");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type établissement");

                    b.Property<string>("CodeZoneHabi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Zone habitation");

                    b.Property<DateTime?>("DateCrea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date de création");

                    b.Property<DateTime?>("DateCreaBd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("DateCreaBD")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date de création");

                    b.Property<DateTime?>("DateDeciOuve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date du décision d'ouverture");

                    b.Property<DateTime?>("DateDeliv")
                        .HasColumnType("datetime")
                        .HasComment("Date de délivrance CIN");

                    b.Property<DateTime?>("DateDemaActi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("La date du démarage de l'activité");

                    b.Property<DateTime?>("DateDepoCahiChar")
                        .HasColumnType("datetime")
                        .HasComment("La date dépôt du cahier des charges");

                    b.Property<DateTime?>("DateFerm")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateNaisFond")
                        .HasColumnType("datetime")
                        .HasComment("Date de naissance fondateur");

                    b.Property<DateTime?>("DateValFerm")
                        .HasColumnType("datetime")
                        .HasColumnName("DateVAlFerm");

                    b.Property<bool>("DepoCahiCharPrep")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("E-mail");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Libellé établissement");

                    b.Property<string>("LieuNaisFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Lieu de naissance fondateur");

                    b.Property<string>("MatrFisc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPrenFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Nom et Prénom du fondateur de projet");

                    b.Property<int?>("NombEnfa")
                        .HasColumnType("int")
                        .HasComment("Nombre d'enfant");

                    b.Property<string>("NumeDeciOuve")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Numéro du décision d'ouverture");

                    b.Property<int?>("NumeEtab")
                        .HasColumnType("int");

                    b.Property<string>("NumePiecIden")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("CIN");

                    b.Property<string>("Prof")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Profession");

                    b.Property<string>("Tele")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Téléphone");

                    b.Property<string>("UserFerm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeEtab")
                        .HasName("PK_Nomenclature_Etablissement_1");

                    b.HasIndex("CodeComm");

                    b.HasIndex("CodeDele");

                    b.HasIndex("CodeDeleFond");

                    b.HasIndex("CodeDipl");

                    b.HasIndex("CodeNiveEtud");

                    b.HasIndex("CodeSect");

                    b.HasIndex("CodeSituFami");

                    b.HasIndex("CodeZoneHabi");

                    b.HasIndex(new[] { "CodeTypeEtab" }, "NonClusteredIndex-20201201-132620");

                    b.HasIndex(new[] { "CodeEtab" }, "index_Etab_2");

                    b.ToTable("Nomenclature_Etablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatEtablissement", b =>
                {
                    b.Property<string>("CodeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code type établissement");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("CodeTypeEtatEtab")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé type établissement (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeEtatEtab");

                    b.HasIndex("CodeTypeEtatEtab");

                    b.ToTable("Nomenclature_EtatEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatFamille", b =>
                {
                    b.Property<string>("CodeEtatFam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEtatFam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEtatFam");

                    b.ToTable("Nomenclature_EtatFamille", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatParent", b =>
                {
                    b.Property<string>("CodeEtatPare")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEtatPare")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEtatPare");

                    b.ToTable("Nomenclature_EtatParent", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatPsycologique", b =>
                {
                    b.Property<string>("CodeEtatPsyc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEtatPsyc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEtatPsyc");

                    b.ToTable("Nomenclature_EtatPsycologique", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatReclamation", b =>
                {
                    b.Property<string>("CodeEtatRecl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEtatRecl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEtatRecl");

                    b.ToTable("Nomenclature_EtatReclamation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatSante", b =>
                {
                    b.Property<string>("CodeEtatSant")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEtatSant")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEtatSant");

                    b.ToTable("Nomenclature_EtatSante", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatSignalisation", b =>
                {
                    b.Property<string>("CodeEtatSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeEtatSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeEtatSignalisation");

                    b.ToTable("Nomenclature_EtatSignalisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureFonction", b =>
                {
                    b.Property<string>("CodeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Fonction");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé Fonction (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeFonc");

                    b.ToTable("Nomenclature_Fonction", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGenerale", b =>
                {
                    b.Property<string>("Pays")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DelaiInspection")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Direction")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("direction");

                    b.Property<string>("Ministere")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ministere");

                    b.Property<int?>("NbjourSup")
                        .HasColumnType("int")
                        .HasColumnName("nbjourSup");

                    b.Property<int?>("NbjourSupSignalisation")
                        .HasColumnType("int")
                        .HasColumnName("nbjourSupSignalisation");

                    b.Property<int?>("Nbjoursaisieinsp")
                        .HasColumnType("int");

                    b.Property<int?>("NbjoursupRapport")
                        .HasColumnType("int")
                        .HasColumnName("nbjoursupRapport");

                    b.Property<int?>("Nbjourupdate")
                        .HasColumnType("int")
                        .HasColumnName("nbjourupdate");

                    b.Property<int?>("NbjourupdateEnfant")
                        .HasColumnType("int")
                        .HasColumnName("nbjourupdateEnfant");

                    b.Property<int?>("NbjourupdateRapport")
                        .HasColumnType("int")
                        .HasColumnName("nbjourupdateRapport");

                    b.Property<int?>("NbjourupdateSignalisation")
                        .HasColumnType("int")
                        .HasColumnName("nbjourupdateSignalisation");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("region");

                    b.Property<string>("Signature")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("signature");

                    b.HasKey("Pays");

                    b.ToTable("Nomenclature_Generale", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGenre", b =>
                {
                    b.Property<string>("CodeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code genre");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé genre (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeGenr");

                    b.ToTable("Nomenclature_Genre", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGouvernorat", b =>
                {
                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code gouvernorat");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("CodeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("District");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé gouvernorat");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeGouv");

                    b.HasIndex("CodeDist");

                    b.ToTable("Nomenclature_Gouvernorat", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGrade", b =>
                {
                    b.Property<string>("CodeGrad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeGrad")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeGrad");

                    b.ToTable("Nomenclature_Grade", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureInformateur", b =>
                {
                    b.Property<string>("CodeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeInformateur");

                    b.ToTable("Nomenclature_Informateur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureInfrastrcture", b =>
                {
                    b.Property<string>("CodeInfrastrcture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeInfrastrcture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeInfrastrcture");

                    b.ToTable("Nomenclature_Infrastrcture", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureIntergrationHandicap", b =>
                {
                    b.Property<string>("CodeInteHand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeInteHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeInteHand");

                    b.ToTable("Nomenclature_IntergrationHandicap", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureInterventionnecessaire", b =>
                {
                    b.Property<string>("CodeInterv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTypeInterv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeInterv");

                    b.ToTable("Nomenclature_Interventionnecessaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureLangueMaternelle", b =>
                {
                    b.Property<string>("CodeLangMate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Niveau d'Etude");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeLangMate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé Niveau d'Etude (Arabe)");

                    b.Property<int>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeLangMate");

                    b.ToTable("Nomenclature_LangueMaternelle", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureLienExterne", b =>
                {
                    b.Property<string>("CodeLienExterne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeLienExterne")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeLienExterne");

                    b.ToTable("Nomenclature_LienExterne", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureMethodeSignalisation", b =>
                {
                    b.Property<string>("CodeMethodeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeMethodeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeMethodeSignalisation");

                    b.ToTable("Nomenclature_MethodeSignalisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureMinistereFondatrice", b =>
                {
                    b.Property<string>("CodeMiniFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LibeMiniFond")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeMiniFond");

                    b.ToTable("Nomenclature_MinistereFondatrice", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNationalite", b =>
                {
                    b.Property<string>("CodeNati")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNati")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNati");

                    b.ToTable("Nomenclature_Nationalite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureActivite", b =>
                {
                    b.Property<string>("CodeNatAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNatAct")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNatAct");

                    b.ToTable("Nomenclature_NatureActivite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureAnomalie", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeNatureAnomalie")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNatureAnomalie")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToTable("Nomenclature_NatureAnomalie", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureformateur", b =>
                {
                    b.Property<string>("CodeNatFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNatFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNatFor");

                    b.ToTable("Nomenclature_Natureformateur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureformation", b =>
                {
                    b.Property<string>("CodeNatFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNatFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNatFor");

                    b.ToTable("Nomenclature_Natureformation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureInvest", b =>
                {
                    b.Property<string>("CodeNatInv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNatInv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNatInv");

                    b.ToTable("Nomenclature_NatureInvest", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNaturePere", b =>
                {
                    b.Property<string>("CodeNaturePere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNaturePere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNaturePere");

                    b.ToTable("Nomenclature_NaturePere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureProposition", b =>
                {
                    b.Property<string>("CodeNatPro")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNatPro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNatPro");

                    b.ToTable("Nomenclature_NatureProposition", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNatureSignalisation", b =>
                {
                    b.Property<string>("CodeNatureSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNatureSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNatureSignalisation");

                    b.ToTable("Nomenclature_NatureSignalisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNiveauEleve", b =>
                {
                    b.Property<string>("CodeNivEle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNivEle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNivEle");

                    b.ToTable("Nomenclature_NiveauEleve", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNiveauEtude", b =>
                {
                    b.Property<string>("CodeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Niveau d'Etude");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeNiveEtud")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé Niveau d'Etude (Arabe)");

                    b.Property<int>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeNiveEtud");

                    b.ToTable("Nomenclature_NiveauEtude", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNiveauFormation", b =>
                {
                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeNivFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeNivFor");

                    b.ToTable("Nomenclature_NiveauFormation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNiveauSalaire", b =>
                {
                    b.Property<string>("CodeNiveSala")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Niveau d'Etude");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeNiveSala")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé Niveau d'Etude (Arabe)");

                    b.Property<int>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeNiveSala");

                    b.ToTable("Nomenclature_NiveauSalaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOrganisationAdministrative", b =>
                {
                    b.Property<string>("CodeOrgaAdmi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code type établissement");

                    b.Property<string>("LibeOrgaAdmi")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeOrgaAdmi");

                    b.HasIndex("CodeTypeEtab");

                    b.ToTable("Nomenclature_OrganisationAdministrative", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOrganisationPedagogique", b =>
                {
                    b.Property<string>("CodeOrgaPeda")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code type établissement");

                    b.Property<string>("LibeOrgaPeda")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeOrgaPeda");

                    b.HasIndex("CodeTypeEtab");

                    b.ToTable("Nomenclature_OrganisationPedagogique", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOuvertureEtablissement", b =>
                {
                    b.Property<string>("CodeOuveEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeOuveEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeOuveEtab");

                    b.ToTable("Nomenclature_OuvertureEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclaturePriorite", b =>
                {
                    b.Property<string>("CodePrio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Commune");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibePrio")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodePrio");

                    b.ToTable("Nomenclature_Priorite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureProfession", b =>
                {
                    b.Property<string>("CodeProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Type Equipement");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeProf")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Libellée Type Equipement");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Ordre d'affichage");

                    b.HasKey("CodeProf");

                    b.ToTable("Nomenclature_Profession", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureQualite", b =>
                {
                    b.Property<string>("CodeQual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code qualite");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeQual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé qualite (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeQual");

                    b.ToTable("Nomenclature_Qualite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRectification", b =>
                {
                    b.Property<string>("CodeRect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeRect")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeRect");

                    b.ToTable("Nomenclature_rectification", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRegimePropriete", b =>
                {
                    b.Property<string>("CodeRegiProp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeRegiProp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeRegiProp");

                    b.ToTable("Nomenclature_RegimePropriete", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRevenuMensuel", b =>
                {
                    b.Property<string>("CodeReveMens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code genre");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeReveMens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé genre (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeReveMens");

                    b.ToTable("Nomenclature_RevenuMensuel", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRubriqueInspection", b =>
                {
                    b.Property<string>("CodeRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeCateRubrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeRubrInsp")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeRubrInsp")
                        .HasName("PK_Nomenclature_RubriqueInspection1");

                    b.HasIndex("CodeCateRubrInsp");

                    b.ToTable("Nomenclature_RubriqueInspection", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSecteur", b =>
                {
                    b.Property<string>("CodeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code secteur");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé secteur (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeSect");

                    b.ToTable("Nomenclature_Secteur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSecteurFormation", b =>
                {
                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeSecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeSecFor");

                    b.ToTable("Nomenclature_SecteurFormation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSignalisation", b =>
                {
                    b.Property<int>("CodeSignalisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeSignalisation"), 1L, 1);

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasColumnName("acti");

                    b.Property<string>("AdresseConcerne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Avis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChefService")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeResponsable")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ConusltatEnfance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("conusltatEnfance")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DateAnalyse")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateChefService")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateDepot")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateInfoInspecteur")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateSignalisation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreationrapport")
                        .HasColumnType("datetime")
                        .HasColumnName("datecreationrapport");

                    b.Property<DateTime?>("Datevisite")
                        .HasColumnType("date")
                        .HasColumnName("datevisite");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etablissement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fichier")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fichier");

                    b.Property<string>("Inspecteur2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MotifSupression")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NomConcerne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroDepot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ObservationChefService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultatChefService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextAnalyse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEtablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VilleConcerne")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeSignalisation");

                    b.HasIndex("CodeConcerne");

                    b.HasIndex("CodeDele");

                    b.HasIndex("CodeGouv");

                    b.HasIndex("CodeInformateur");

                    b.HasIndex("CodeTypeSignalisation");

                    b.ToTable("Nomenclature_Signalisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSituationFamiliale", b =>
                {
                    b.Property<string>("CodeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code genre");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé genre (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeSituFami");

                    b.ToTable("Nomenclature_SituationFamiliale", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSituationProfessionel", b =>
                {
                    b.Property<string>("CodeSituProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeSituProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeSituProf");

                    b.ToTable("Nomenclature_SituationProfessionel", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureStatutSignalisation", b =>
                {
                    b.Property<string>("CodeStatutSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeEtatSignalisation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeStatutSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeStatutSignalisation");

                    b.ToTable("Nomenclature_StatutSignalisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureStructureAttache", b =>
                {
                    b.Property<string>("CodeStruAtta")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeStruAtta")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeStruAtta");

                    b.ToTable("Nomenclature_StructureAttache", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTerrain", b =>
                {
                    b.Property<string>("CodeTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTerrain")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTerrain");

                    b.ToTable("Nomenclature_Terrain", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTrancheAge", b =>
                {
                    b.Property<string>("CodeTranAge")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTranAge");

                    b.ToTable("Nomenclature_TrancheAge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTrangeAgeCouv", b =>
                {
                    b.Property<string>("CodeTranCouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTranCouv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTranCouv");

                    b.ToTable("Nomenclature_TrangeAgeCouv", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeAffiche", b =>
                {
                    b.Property<string>("CodeTypeAffiche")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeAffiche")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeAffiche");

                    b.ToTable("Nomenclature_TypeAffiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeBoolean", b =>
                {
                    b.Property<bool>("Code")
                        .HasColumnType("bit");

                    b.Property<string>("Libe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code");

                    b.ToTable("Nomenclature_TypeBoolean", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeCloture", b =>
                {
                    b.Property<string>("CodeTypeClot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeClot")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeClot");

                    b.ToTable("Nomenclature_TypeCloture", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeConnexionInternet", b =>
                {
                    b.Property<string>("CodeTypeConnInte")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("خصائص الفضاء الخارجي");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeConnInte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeConnInte");

                    b.ToTable("Nomenclature_TypeConnexionInternet", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEquipement", b =>
                {
                    b.Property<string>("CodeTypeEqui")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeTypeEqui")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Ordre d'affichage");

                    b.HasKey("CodeTypeEqui");

                    b.ToTable("Nomenclature_TypeEquipement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEspace", b =>
                {
                    b.Property<string>("CodeTypeEspa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Type Equipement");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("CaraEspa")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LibeTypeEspa")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Libellée Type Equipement");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Ordre d'affichage");

                    b.HasKey("CodeTypeEspa");

                    b.ToTable("Nomenclature_TypeEspace", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEtablissement", b =>
                {
                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code type établissement");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("CodeFormulaire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Formulaire")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé type établissement (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeTypeEtab");

                    b.ToTable("Nomenclature_TypeEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEtatEtablissement", b =>
                {
                    b.Property<string>("CodeTypeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeEtatEtab");

                    b.ToTable("Nomenclature_TypeEtatEtablissement", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeFormation", b =>
                {
                    b.Property<string>("CodeTypeForm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeForm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeForm");

                    b.ToTable("Nomenclature_TypeFormation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeFormulaire", b =>
                {
                    b.Property<string>("CodeFormulaire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeFormulaire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeFormulaire");

                    b.ToTable("Nomenclature_TypeFormulaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeHandicap", b =>
                {
                    b.Property<string>("CodeTypeHand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeHand");

                    b.ToTable("Nomenclature_TypeHandicap", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeInscription", b =>
                {
                    b.Property<string>("CodeTypeInsc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Type Equipement");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeTypeInsc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Libellée Type Equipement");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Ordre d'affichage");

                    b.HasKey("CodeTypeInsc");

                    b.ToTable("Nomenclature_TypeInscription", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeInspection", b =>
                {
                    b.Property<string>("CodeTypeInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeInsp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeInsp");

                    b.ToTable("Nomenclature_TypeInspection", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeIntervention", b =>
                {
                    b.Property<string>("CodeTypeInterv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeInterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeInterv");

                    b.ToTable("Nomenclature_TypeIntervention", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeMessage", b =>
                {
                    b.Property<string>("CodeTypeM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeM")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeM");

                    b.ToTable("Nomenclature_TypeMessage", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypePriseEnCharge", b =>
                {
                    b.Property<string>("CodeTypePrisChar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Niveau d'Etude");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé Niveau d'Etude (Arabe)");

                    b.Property<int>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeTypePrisChar");

                    b.ToTable("Nomenclature_TypePriseEnCharge", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeproposition", b =>
                {
                    b.Property<string>("CodetypePro")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibetypePro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodetypePro");

                    b.ToTable("Nomenclature_Typeproposition", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypePropriete", b =>
                {
                    b.Property<string>("CodeTypeProp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeProp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeProp");

                    b.ToTable("Nomenclature_TypePropriete", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeRepartition", b =>
                {
                    b.Property<string>("CodeTypeRepar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeRepar")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeRepar");

                    b.ToTable("Nomenclature_TypeRepartition", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeSignalisation", b =>
                {
                    b.Property<string>("CodeTypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("CodeTypeSignalisation")
                        .HasName("PK_Nomenclature_TypeS");

                    b.ToTable("Nomenclature_TypeSignalisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureZone", b =>
                {
                    b.Property<string>("CodeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code zone (Urbain/rurale)");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasComment("Actif (Oui/Non)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Libellé zone (Arabe)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int")
                        .HasComment("Order d'affichage");

                    b.HasKey("CodeZone");

                    b.ToTable("Nomenclature_Zone", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.NomeTypeFichierJoint", b =>
                {
                    b.Property<string>("CodeTypefich")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("IconTypeFich")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("iconTypeFich");

                    b.Property<string>("LibeTypeFich")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CodeTypefich");

                    b.ToTable("Nome_TypeFichierJoint", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageAnneeScolaire", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateInit")
                        .HasColumnType("datetime");

                    b.Property<string>("Obse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AnneScol");

                    b.ToTable("Parametrage_AnneeScolaire", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageColumn", b =>
                {
                    b.Property<int>("NumeNome")
                        .HasColumnType("int");

                    b.Property<int>("NumeColu")
                        .HasColumnType("int");

                    b.Property<string>("CodeEnti")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ColuName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ForeKeys")
                        .HasColumnType("bit");

                    b.Property<string>("LibeColu")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNome")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomTable")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeRela")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeNome", "NumeColu")
                        .HasName("PK_Parametrage_FkColumns");

                    b.ToTable("Parametrage_Columns", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageColumnRechercheMultiCritere", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdCube")
                        .HasColumnType("int")
                        .HasColumnName("id_Cube");

                    b.Property<string>("Area")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<int?>("AreaIndex")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CellFormatString")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CellFormatType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SummaryType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Visi")
                        .HasColumnType("bit");

                    b.HasKey("Id", "IdCube");

                    b.ToTable("Parametrage_ColumnRechercheMultiCritere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageCubeAnalyse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("NomCube")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.Property<string>("Requ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parametrage_CubeAnalyse", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageDimensionCube", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("IdCube")
                        .HasColumnType("int")
                        .HasColumnName("id_Cube");

                    b.Property<string>("Area")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<int?>("AreaIndex")
                        .HasColumnType("int");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CellFormatString")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CellFormatType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SummaryType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("Visi")
                        .HasColumnType("bit");

                    b.HasKey("Id", "IdCube");

                    b.ToTable("Parametrage_DimensionCube", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageGroupeNomenclature", b =>
                {
                    b.Property<string>("CodeGrou")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGrou")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CodeGrou");

                    b.ToTable("Parametrage_GroupeNomenclature", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageNomencaltureActivite", b =>
                {
                    b.Property<string>("CodeActivite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNoma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Codeenti")
                        .HasColumnType("int")
                        .HasColumnName("codeenti");

                    b.ToTable("Parametrage_NomencaltureActivite", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageNomencaltureTypeEtab", b =>
                {
                    b.Property<string>("CodeNoma")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Codeenti")
                        .HasColumnType("int")
                        .HasColumnName("codeenti");

                    b.ToTable("Parametrage_NomencaltureTypeEtab", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageNomenclature", b =>
                {
                    b.Property<int>("NumeNome")
                        .HasColumnType("int");

                    b.Property<bool?>("Acti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CodeEnti")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGrou")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNome")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomTable")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.Property<string>("SpDelete")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeNome");

                    b.ToTable("Parametrage_Nomenclature", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ParametrageRechercheMultiCritere", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.Property<string>("Requ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Parametrage_RechercheMultiCritere_1");

                    b.ToTable("Parametrage_RechercheMultiCritere", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.PassationFiche", b =>
                {
                    b.Property<int>("CodePas")
                        .HasColumnType("int")
                        .HasColumnName("codePas");

                    b.Property<string>("ActivitePas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adirecteur")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADirecteur");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("Arefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DatePas")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("Directeur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtabPas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Refrence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refrence");

                    b.HasKey("CodePas");

                    b.ToTable("Passation_fiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.PassationParaticipant", b =>
                {
                    b.Property<int?>("CodePas")
                        .HasColumnType("int")
                        .HasColumnName("codePas");

                    b.Property<string>("CodeUtil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Passation_paraticipant", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.PersonnelFiche", b =>
                {
                    b.Property<string>("AdatenotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdrePers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double?>("Anci")
                        .HasColumnType("float");

                    b.Property<string>("AnotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCorp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDipl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGrad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeQual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeReveMens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutiladd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("codeutiladd");

                    b.Property<string>("CompInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCin")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCIN");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateaffectation")
                        .HasColumnType("date")
                        .HasColumnName("dateaffectation");

                    b.Property<DateTime?>("DatenotePead")
                        .HasColumnType("date")
                        .HasColumnName("datenotePead");

                    b.Property<DateTime?>("Daterecrutement")
                        .HasColumnType("date")
                        .HasColumnName("daterecrutement");

                    b.Property<DateTime?>("Daterespons")
                        .HasColumnType("date")
                        .HasColumnName("daterespons");

                    b.Property<bool?>("Elig")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdenUniqMatrCnss")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuNais")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPren")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notePead");

                    b.Property<string>("NumeCin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NumeCIN");

                    b.Property<bool?>("Spec")
                        .HasColumnType("bit");

                    b.Property<string>("StructureAttache")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelGsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TelGSM");

                    b.ToTable("Personnel_Fiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.PersonnelFormationContinue", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("IdenUniq")
                        .HasColumnType("int")
                        .HasComment("Identifiant du personnel");

                    b.Property<int>("NumeLign")
                        .HasColumnType("int")
                        .HasComment("Nume sequentielle");

                    b.Property<string>("CodeTypeForm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type formation");

                    b.Property<DateTime?>("DateForm")
                        .HasColumnType("datetime")
                        .HasComment("Date formation");

                    b.Property<string>("LieuForm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Lieu  formation");

                    b.Property<string>("Orga")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Organisme");

                    b.Property<double?>("PeriForm")
                        .HasColumnType("float");

                    b.Property<string>("SujetForm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeEtab", "AnneScol", "IdenUniq", "NumeLign");

                    b.HasIndex("CodeTypeForm");

                    b.ToTable("Personnel_FormationContinue", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.PersonnelPersonnel", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("IdenUniq")
                        .HasColumnType("int");

                    b.Property<string>("AdatenotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AdrePers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double?>("Anci")
                        .HasColumnType("float")
                        .HasComment("Anciennete (Année)");

                    b.Property<string>("AnotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCorp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code corps");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Délégation");

                    b.Property<string>("CodeDipl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Spécialité");

                    b.Property<string>("CodeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code Fonction");

                    b.Property<string>("CodeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGrad")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Grade");

                    b.Property<string>("CodeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Niveau d'Etude");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeQual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code qualité");

                    b.Property<string>("CodeReveMens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code genre");

                    b.Property<string>("CodeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Situation familiale");

                    b.Property<string>("CodeSituProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Complément information");

                    b.Property<DateTime?>("DateCin")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCIN");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateaffectation")
                        .HasColumnType("date")
                        .HasColumnName("dateaffectation");

                    b.Property<DateTime?>("DatenotePead")
                        .HasColumnType("date")
                        .HasColumnName("datenotePead");

                    b.Property<DateTime?>("Daterecrutement")
                        .HasColumnType("date")
                        .HasColumnName("daterecrutement");

                    b.Property<DateTime?>("Daterespons")
                        .HasColumnType("date")
                        .HasColumnName("daterespons");

                    b.Property<bool?>("Elig")
                        .HasColumnType("bit")
                        .HasComment("Eligible");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdenUniqMatrCnss")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuNais")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPren")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("NomPren");

                    b.Property<string>("NotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notePead");

                    b.Property<string>("NumeCin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NumeCIN");

                    b.Property<bool?>("Spec")
                        .HasColumnType("bit")
                        .HasComment("Spécialiste");

                    b.Property<string>("StructureAttache")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelGsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TelGSM");

                    b.HasKey("CodeEtab", "AnneScol", "IdenUniq");

                    b.HasIndex("CodeCorp");

                    b.HasIndex("CodeDele");

                    b.HasIndex("CodeDipl");

                    b.HasIndex("CodeFonc");

                    b.HasIndex("CodeGenr");

                    b.HasIndex("CodeGrad");

                    b.HasIndex("CodeNiveEtud");

                    b.HasIndex("CodeQual");

                    b.HasIndex("CodeReveMens");

                    b.HasIndex("CodeSituProf");

                    b.HasIndex(new[] { "NumeCin" }, "NonClusteredIndex-20201231-175555");

                    b.ToTable("Personnel_Personnel", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.PropositionFiche", b =>
                {
                    b.Property<int>("CodePro")
                        .HasColumnType("int")
                        .HasColumnName("codePro");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("CodeNatPro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeTypePro")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DatePro")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<string>("Sujet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodePro");

                    b.ToTable("Proposition_fiche", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.RapportFichier", b =>
                {
                    b.Property<int>("CodeFichier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeFichier"), 1L, 1);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomFichier")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("TypeRapport")
                        .HasColumnType("int");

                    b.HasKey("CodeFichier");

                    b.ToTable("Rapport_Fichier", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ReclamationReclamation", b =>
                {
                    b.Property<int>("NumeRecl")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Affe")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CodeEtatRecl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePrio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateRecl")
                        .HasColumnType("datetime");

                    b.Property<string>("NomPrenPersRecl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObseDeci")
                        .HasColumnType("text");

                    b.Property<string>("Rapp")
                        .HasColumnType("text")
                        .UseCollation("Arabic_CI_AS");

                    b.Property<string>("Sujet")
                        .HasColumnType("text")
                        .UseCollation("Arabic_CI_AS");

                    b.HasKey("NumeRecl", "CodeEtab", "AnneScol");

                    b.HasIndex("CodeEtatRecl");

                    b.HasIndex("CodePrio");

                    b.HasIndex("CodeEtab", "AnneScol");

                    b.ToTable("Reclamation_Reclamation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ReclamationReclamationParent", b =>
                {
                    b.Property<int>("NumeRecl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumeRecl"), 1L, 1);

                    b.Property<string>("Cin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CIN");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtatRecl")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePrio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL")
                        .HasComment("Code commerciale (Login)");

                    b.Property<DateTime>("DateRecl")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomPren")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ObseDeci")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rapp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Sujet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("NumeRecl");

                    b.HasIndex("CodeEtab");

                    b.HasIndex("CodeEtatRecl");

                    b.HasIndex("CodePrio");

                    b.HasIndex("Codeutil");

                    b.ToTable("Reclamation_ReclamationParent", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteAttacheInspecteur", b =>
                {
                    b.Property<string>("CodeAideInspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCodeutilAdd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeCodeutil_ADD");

                    b.Property<string>("CodeInspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("Securite_AttacheInspecteur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteDirecteur", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Etat")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pwd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Securite_Directeur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteDroitaccesgroupe", b =>
                {
                    b.Property<string>("Codegrouutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEGROUUTIL");

                    b.Property<string>("Codeenti")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEENTI");

                    b.Property<bool>("DroiDele")
                        .HasColumnType("bit");

                    b.Property<bool>("DroiSele")
                        .HasColumnType("bit");

                    b.Property<bool>("DroiUpda")
                        .HasColumnType("bit");

                    b.HasKey("Codegrouutil", "Codeenti");

                    b.HasIndex("Codeenti");

                    b.ToTable("SECURITE_DROITACCESGROUPE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteDroitaccesutilisateur", b =>
                {
                    b.Property<string>("Codeenti")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEENTI");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL");

                    b.Property<bool>("DroiAcce")
                        .HasColumnType("bit");

                    b.HasKey("Codeenti", "Codeutil")
                        .HasName("PK_SECURITE_DROITACCESUTILISAT");

                    b.HasIndex("Codeutil");

                    b.ToTable("SECURITE_DROITACCESUTILISATEUR", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteEntite", b =>
                {
                    b.Property<string>("Codeenti")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEENTI");

                    b.Property<string>("Codepack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEPACK");

                    b.Property<int?>("Coderangmenu")
                        .HasColumnType("int")
                        .HasColumnName("CODERANGMENU");

                    b.Property<string>("Libeenti")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LIBEENTI");

                    b.Property<string>("Uri")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("URI");

                    b.HasKey("Codeenti");

                    b.HasIndex("Codepack");

                    b.ToTable("SECURITE_ENTITE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteEtablissement15112020", b =>
                {
                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CODEUTIL");

                    b.ToTable("Securite_Etablissement_15112020", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteEtablissementHistorique", b =>
                {
                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL");

                    b.ToTable("Securite_Etablissement_historique", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteEtablissementTrace", b =>
                {
                    b.Property<string>("Codeutil")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("codeutil");

                    b.Property<string>("CodeutilSecurite")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("codeutil_securite");

                    b.Property<DateTime?>("Dateoperaion")
                        .HasColumnType("datetime")
                        .HasColumnName("dateoperaion");

                    b.Property<string>("Detail")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("detail");

                    b.Property<string>("Operation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("operation");

                    b.ToTable("Securite_Etablissement_Trace", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteGroupeutilisateur", b =>
                {
                    b.Property<string>("Codegrouutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEGROUUTIL");

                    b.Property<bool?>("Acti")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CodeGrouUtilPare")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Libegrouutil")
                        .IsRequired()
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("LIBEGROUUTIL");

                    b.Property<string>("Obse")
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("OBSE");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("Codegrouutil")
                        .HasName("PK_SECURTIE_GROUPEUTILISATEUR");

                    b.ToTable("SECURITE_GROUPEUTILISATEUR", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteNiveauhierarchique", b =>
                {
                    b.Property<string>("Codenivehier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODENIVEHIER");

                    b.Property<bool?>("Acti")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Libenivehier")
                        .IsRequired()
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("LIBENIVEHIER");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.HasKey("Codenivehier");

                    b.ToTable("SECURITE_NIVEAUHIERARCHIQUE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuritePackage", b =>
                {
                    b.Property<string>("Codepack")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEPACK");

                    b.Property<bool?>("IsVisi")
                        .HasColumnType("bit");

                    b.Property<string>("Libepack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LIBEPACK");

                    b.Property<int?>("Ordraffi")
                        .HasColumnType("int")
                        .HasColumnName("ORDRAFFI");

                    b.Property<string>("Uri")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("URI");

                    b.HasKey("Codepack");

                    b.ToTable("SECURITE_PACKAGE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteSessionUtilisateur", b =>
                {
                    b.Property<string>("CodeUtil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DateCurrSess")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDebuLastSess")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFinLastSess")
                        .HasColumnType("datetime");

                    b.Property<string>("IpAdre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastIpAdre")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeUtil")
                        .HasName("PK_Securite_SessionUtilisateur_1");

                    b.ToTable("Securite_SessionUtilisateur", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteSiganlisation", b =>
                {
                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutil");

                    b.Property<string>("Valeur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("valeur");

                    b.ToTable("Securite_Siganlisation", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteTraceutilisateur", b =>
                {
                    b.Property<decimal>("Numetrac")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(10,0)")
                        .HasColumnName("NUMETRAC");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Numetrac"), 1L, 1);

                    b.Property<string>("Codeenti")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEENTI");

                    b.Property<string>("Codetypeoper")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODETYPEOPER");

                    b.Property<string>("Codeutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL");

                    b.Property<DateTime>("Datetrac")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETRAC");

                    b.Property<string>("Libetrac")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("LIBETRAC");

                    b.Property<string>("Linktrac")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("LINKTRAC");

                    b.Property<string>("Pkenti")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PKENTI");

                    b.HasKey("Numetrac");

                    b.HasIndex("Codetypeoper");

                    b.HasIndex("Codeutil");

                    b.ToTable("SECURITE_TRACEUTILISATEUR", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteTypeoperationtrace", b =>
                {
                    b.Property<string>("Codetypeopertrac")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODETYPEOPERTRAC");

                    b.Property<string>("Libetypeopertrac")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LIBETYPEOPERTRAC");

                    b.Property<string>("Obse")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("OBSE");

                    b.HasKey("Codetypeopertrac");

                    b.ToTable("SECURITE_TYPEOPERATIONTRACE", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SecuriteUtilisateur", b =>
                {
                    b.Property<string>("Codeutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL")
                        .HasComment("Code commerciale (Login)");

                    b.Property<string>("CodeCerc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCommFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code type standing");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeUtilPare")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Codegrouutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEGROUUTIL")
                        .HasComment("Groupe utilisateur");

                    b.Property<string>("Codenivehier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODENIVEHIER")
                        .HasComment("Niveau hierarchique");

                    b.Property<string>("Codeutiladd")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutiladd");

                    b.Property<string>("Codeutilupdate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilupdate");

                    b.Property<DateTime?>("Dateadduser")
                        .HasColumnType("datetime")
                        .HasColumnName("dateadduser");

                    b.Property<DateTime?>("Datemaj")
                        .HasColumnType("datetime")
                        .HasColumnName("DATEMAJ")
                        .HasComment("Date de dernier MAJ");

                    b.Property<DateTime?>("Dateupdateuser")
                        .HasColumnType("datetime")
                        .HasColumnName("dateupdateuser");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("Etat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Gsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GSM");

                    b.Property<string>("Matr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MATR")
                        .HasComment("Matricule");

                    b.Property<string>("Motpassutil")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MOTPASSUTIL")
                        .HasComment("Mot de passe");

                    b.Property<string>("Nomprenutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMPRENUTIL")
                        .HasComment("Nom et prénom");

                    b.Property<string>("SkypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SkypeID");

                    b.Property<string>("Tele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Téléphone / GSM");

                    b.HasKey("Codeutil");

                    b.HasIndex("Codegrouutil");

                    b.HasIndex("Codenivehier");

                    b.ToTable("SECURITE_UTILISATEUR", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SignalisationFichier", b =>
                {
                    b.Property<int>("CodeFichier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeFichier"), 1L, 1);

                    b.Property<int?>("CodeSignalisation")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomFichier")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CodeFichier");

                    b.ToTable("Signalisation_Fichier", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SignalisationFichierRpt", b =>
                {
                    b.Property<int>("CodeFichier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodeFichier"), 1L, 1);

                    b.Property<int?>("CodeSignalisation")
                        .HasColumnType("int");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomFichier")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CodeFichier");

                    b.ToTable("Signalisation_Fichier_Rpt", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SignalisationNatureAnomalie", b =>
                {
                    b.Property<string>("CodeNatureAnomalie")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CodeSignalisation")
                        .HasColumnType("int");

                    b.ToTable("Signalisation_NatureAnomalie", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.SignatureFichier", b =>
                {
                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutil");

                    b.Property<byte[]>("Fichier")
                        .HasColumnType("varbinary(max)");

                    b.ToTable("Signature_Fichier", (string)null);
                });

            modelBuilder.Entity("METABack.Entities.ViewActivite", b =>
                {
                    b.Property<string>("ActiviteAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("CodeAct")
                        .HasColumnType("int")
                        .HasColumnName("codeAct");

                    b.Property<string>("CodeNatAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DateAct")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("LibeNatAct")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("LibesecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LieuAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moisactivite")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("moisactivite");

                    b.Property<int?>("NbFemme")
                        .HasColumnType("int");

                    b.Property<int?>("NbHomme")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SujetAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typepart")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("view_activite");
                });

            modelBuilder.Entity("METABack.Entities.ViewAnomalie", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeAnom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DatefinAn")
                        .HasColumnType("date")
                        .HasColumnName("datefinAn");

                    b.Property<string>("DetaAnom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibeCommEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libeanom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("libeanom");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.ToView("View_Anomalie");
                });

            modelBuilder.Entity("METABack.Entities.ViewCommune", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeComm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Commune");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS1", b =>
                {
                    b.Property<int>("Annescol")
                        .HasColumnType("int")
                        .HasColumnName("annescol");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrS")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S1");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS10", b =>
                {
                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Methode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<string>("TypeEtablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeSign")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("view_Enfant_S10");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS2", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSect")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Couverture")
                        .HasColumnType("float")
                        .HasColumnName("couverture");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrS")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S2");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS3", b =>
                {
                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypePrisChar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrS")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S3");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS4", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSect")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Encardement")
                        .HasColumnType("float");

                    b.Property<double?>("EncardementD")
                        .HasColumnType("float");

                    b.Property<double?>("EncardementG")
                        .HasColumnType("float");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrS")
                        .HasColumnType("int");

                    b.Property<int?>("TotalEleve")
                        .HasColumnType("int");

                    b.Property<int?>("TotalPersonnel")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S4");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS5", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libesect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrS")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S5");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS6", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombreEtab")
                        .HasColumnType("int")
                        .HasColumnName("nombreEtab");

                    b.Property<int?>("NombreP")
                        .HasColumnType("int")
                        .HasColumnName("nombreP");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("TotalEleve")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S6");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS7", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libegenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegenr");

                    b.Property<string>("Libetranage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("libetranage");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrT")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S7");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS8", b =>
                {
                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libetypehand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("libetypehand");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrT")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S8");
                });

            modelBuilder.Entity("METABack.Entities.ViewEnfantS9", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeDele");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeZone");

                    b.Property<int?>("Nombre")
                        .HasColumnType("int")
                        .HasColumnName("nombre");

                    b.Property<int?>("OrdrD")
                        .HasColumnType("int");

                    b.Property<int?>("OrdrG")
                        .HasColumnType("int");

                    b.ToView("view_Enfant_S9");
                });

            modelBuilder.Entity("METABack.Entities.ViewEquipement", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ConfCara")
                        .HasColumnType("bit");

                    b.Property<bool?>("Disp")
                        .HasColumnType("bit");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEqui")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEqui")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Nomb")
                        .HasColumnType("int");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("View_Equipement");
                });

            modelBuilder.Entity("METABack.Entities.ViewEspace", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Haut")
                        .HasColumnType("float");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEspa")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeEspa")
                        .HasColumnType("int");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surf")
                        .HasColumnType("float");

                    b.ToView("View_Espace");
                });

            modelBuilder.Entity("METABack.Entities.ViewEspaceCaracteristique", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeCaraEspa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConfCara")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<double?>("Haut")
                        .HasColumnType("float");

                    b.Property<string>("LibeCaraEspa")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEspa")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeEspa")
                        .HasColumnType("int");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surf")
                        .HasColumnType("float");

                    b.ToView("View_Espace_Caracteristique");
                });

            modelBuilder.Entity("METABack.Entities.ViewEtablissement", b =>
                {
                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("AnciDire")
                        .HasColumnType("float");

                    b.Property<int?>("AnneDeciOuvr")
                        .HasColumnType("int");

                    b.Property<int?>("AnneFerm")
                        .HasColumnType("int");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int?>("Anneecreation")
                        .HasColumnType("int")
                        .HasColumnName("anneecreation");

                    b.Property<string>("Cadreinspection")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CausFerm")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateDemaActi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFerm")
                        .HasColumnType("datetime");

                    b.Property<string>("DepoCahiCharPrep")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("FraiInscParAnne")
                        .HasColumnType("float");

                    b.Property<double?>("FraiMensActiNorm")
                        .HasColumnType("float");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeCommEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDiplDire")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LibeDiplFond")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFoncDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenrDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenrFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGradDire")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNiveEtudDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNiveEtudFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeOuveEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeQualDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSituFamiDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSituFamiFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuNaisFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoisDeciOuvr")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MoisFerm")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NomPrenDire")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomPrenFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeCindire")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NumeCINDire");

                    b.Property<string>("NumePiecIden")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QuarFerm")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Tele")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.ToView("View_Etablissement");
                });

            modelBuilder.Entity("METABack.Entities.ViewEtablissementUtilisateurByGouv", b =>
                {
                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NombEtab")
                        .HasColumnType("int");

                    b.Property<int>("NombUtil")
                        .HasColumnType("int");

                    b.ToView("View_EtablissementUtilisateurByGouv");
                });

            modelBuilder.Entity("METABack.Entities.ViewEvent", b =>
                {
                    b.Property<string>("ActiviteEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int>("CodeEvent")
                        .HasColumnType("int")
                        .HasColumnName("codeEvent");

                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DateEvent")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("InvesEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNatInv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNivFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("LibesecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LieuEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moisevent")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("moisevent");

                    b.Property<int?>("NbFemmeC")
                        .HasColumnType("int");

                    b.Property<int?>("NbFemmeE")
                        .HasColumnType("int");

                    b.Property<int?>("NbHommeC")
                        .HasColumnType("int");

                    b.Property<int?>("NbHommeE")
                        .HasColumnType("int");

                    b.Property<string>("NomEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PrixEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_event");
                });

            modelBuilder.Entity("METABack.Entities.ViewFicheEtablissement", b =>
                {
                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeOuveEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePersDire")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EMail");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("FraiInscParAnne")
                        .HasColumnType("float");

                    b.Property<double?>("FraiMensActiNorm")
                        .HasColumnType("float");

                    b.Property<double?>("FraiMensPepi")
                        .HasColumnType("float");

                    b.Property<double?>("FraiMesuCont")
                        .HasColumnType("float");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SiteWeb")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TeleFixe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_FicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.ViewFormation", b =>
                {
                    b.Property<string>("Activiteformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("ButFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeCerc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNatFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNatFormateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateformation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("Inspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvesFormation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFormateur")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNatFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("Libenatinv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libenivfor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("libenivfor");

                    b.Property<string>("LieurFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListeTypeEtab")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("listeTypeEtab");

                    b.Property<string>("Listecorps")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("listecorps");

                    b.Property<string>("Moisformation")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("moisformation");

                    b.Property<int?>("NbFemme")
                        .HasColumnType("int");

                    b.Property<int?>("NbHomme")
                        .HasColumnType("int");

                    b.Property<int?>("NbJourFomration")
                        .HasColumnType("int");

                    b.Property<int?>("NbheureFormation")
                        .HasColumnType("int");

                    b.Property<string>("NomFormateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomprenutilInsp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nomprenutilInsp");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PerOrg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PrixFormation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SujetFormation")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("view_formation");
                });

            modelBuilder.Entity("METABack.Entities.ViewFormationContenue", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateForm")
                        .HasColumnType("datetime");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypeForm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuForm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomPren")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Orga")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double?>("PeriForm")
                        .HasColumnType("float");

                    b.Property<string>("SujetForm")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("View_FormationContenue");
                });

            modelBuilder.Entity("METABack.Entities.ViewFormationNationale", b =>
                {
                    b.Property<string>("Activiteformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("ButFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeCerc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNatFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNatFormateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateformation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("Inspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvesFormation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFormateur")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNatFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("Libenatinv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libenivfor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("libenivfor");

                    b.Property<string>("LieurFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListeTypeEtab")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("listeTypeEtab");

                    b.Property<string>("Listecorps")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("listecorps");

                    b.Property<string>("Moisformation")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("moisformation");

                    b.Property<int?>("NbFemme")
                        .HasColumnType("int");

                    b.Property<int?>("NbHomme")
                        .HasColumnType("int");

                    b.Property<int?>("NbJourFomration")
                        .HasColumnType("int");

                    b.Property<int?>("NbheureFormation")
                        .HasColumnType("int");

                    b.Property<string>("NomFormateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomprenutilInsp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nomprenutilInsp");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("PerOrg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PrixFormation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SujetFormation")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("view_formation_Nationale");
                });

            modelBuilder.Entity("METABack.Entities.ViewFormationRapport", b =>
                {
                    b.Property<string>("Activiteformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Codeformation")
                        .HasColumnType("int")
                        .HasColumnName("codeformation");

                    b.Property<DateTime?>("Dateformation")
                        .HasColumnType("date");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieurFormation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nomformateur");

                    b.Property<string>("NomprenutilInsp")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nomprenutilInsp");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observation");

                    b.Property<string>("PerOrg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SujetFormation")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("view_formation_rapport");
                });

            modelBuilder.Entity("METABack.Entities.ViewInfrastructure", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Clot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConnInte")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HautClot")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("Lib1")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("lib1");

                    b.Property<string>("Lib2")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("lib2");

                    b.Property<string>("Lib3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("lib3");

                    b.Property<string>("Lib4")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("lib4");

                    b.Property<string>("LibeCaraEspaExte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEmpl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEmplSieg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeRegiProp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeClot")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeConnInte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypeProp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeZone");

                    b.Property<string>("PassSpecPersBesoSpec")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurfBati")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("SurfEspaExte")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("SurfTota")
                        .IsRequired()
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("SurfaceTerrain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeleFixe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Terrain")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TypeTerrain")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToView("View_Infrastructure");
                });

            modelBuilder.Entity("METABack.Entities.ViewInfrastructureAutre", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodetypeInfra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lbchecked")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("LBChecked");

                    b.Property<string>("LibeInfrastrcture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToView("View_Infrastructure_Autre");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspection", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeCommFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DateLimiCorr")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateVisiInsp")
                        .HasColumnType("date");

                    b.Property<string>("DeduGene")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Arabic_CI_AS");

                    b.Property<string>("DetaAnom")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("JustDeciFerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibeTypeInsp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libegrouutil")
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("LIBEGROUUTIL");

                    b.Property<string>("Matr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MATR");

                    b.Property<string>("Nomprenutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMPRENUTIL");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("RemaSuivActi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_Acti");

                    b.Property<string>("RemaSuivCondSecu")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_CondSecu");

                    b.Property<string>("RemaSuivInfr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_Infr");

                    b.Property<string>("RemaSuivPers")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_Pers");

                    b.Property<string>("RemaSuivProgPeda")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RemaSuiv_ProgPeda");

                    b.Property<string>("RemaSuivSujet")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RemaSuiv_Sujet");

                    b.ToView("View_Inspection");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionClub", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeClub")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeClub")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<int?>("Nbseance")
                        .HasColumnType("int")
                        .HasColumnName("nbseance");

                    b.Property<string>("NomClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Inspection_Club");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionEnfantNe", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DateNais")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Dateinscrit")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("dateinscrit");

                    b.Property<int>("Idenfant")
                        .HasColumnType("int")
                        .HasColumnName("idenfant");

                    b.Property<string>("Nompere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nompere");

                    b.Property<string>("Nomprenom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nomprenom");

                    b.Property<string>("NumTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Inspection_EnfantNE");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionEquipement", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ConfCara")
                        .HasColumnType("bit");

                    b.Property<bool>("Disp")
                        .HasColumnType("bit");

                    b.Property<string>("LibeTypeEqui")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long?>("NumeEqui")
                        .HasColumnType("bigint");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("View_Inspection_Equipement");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionEspace", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ConfCara")
                        .HasColumnType("int");

                    b.Property<double?>("Haut")
                        .HasColumnType("float");

                    b.Property<string>("LibeTypeEspa")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeEspa")
                        .HasColumnType("int");

                    b.Property<string>("Obse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surf")
                        .HasColumnType("float");

                    b.ToView("View_Inspection_espace");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionInfoGenerale", b =>
                {
                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateCrea")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDepoCahiChar")
                        .HasColumnType("datetime");

                    b.Property<bool>("DepoCahiCharPrep")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPrenDire")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NomPrenFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumePiecIden")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumePiecIdenDire")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TeleFixe")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Inspection_InfoGenerale");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionInfrastructure", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("AutrEmplSieg")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("Clot")
                        .HasColumnType("bit");

                    b.Property<string>("CodeEmplSieg")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ExistTerrain")
                        .HasColumnType("bit")
                        .HasColumnName("existTerrain");

                    b.Property<double?>("HautClot")
                        .HasColumnType("float");

                    b.Property<string>("LibeCaraEspaExte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEmpl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEmplSieg")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTerrain")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LibeTypeClot")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeConnInte")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeProp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("PassSpecPersBesoSpec")
                        .HasColumnType("bit");

                    b.Property<double?>("SurfBati")
                        .HasColumnType("float");

                    b.Property<double?>("SurfEspaExte")
                        .HasColumnType("float");

                    b.Property<double?>("SurfTota")
                        .HasColumnType("float");

                    b.Property<string>("SurfaceTerrain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("TeleFixe")
                        .HasColumnType("bit");

                    b.ToView("View_Inspection_Infrastructure");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionInfrastructureAutre", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodetypeInfra")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lbchecked")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("LBChecked");

                    b.Property<string>("LibeInfrastrcture")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToView("View_Inspection_Infrastructure_Autre");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionIntervention", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInterv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeInterv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeInterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Observation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Inspection_intervention");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionLienexterne", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeLienExterne")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeLienExterne")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Observation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Inspection_Lienexterne");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionOrganisationAdministrative", b =>
                {
                    b.Property<bool>("Ajour")
                        .HasColumnType("bit")
                        .HasColumnName("AJour");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Disp")
                        .HasColumnType("bit");

                    b.Property<string>("LibeOrgaAdmi")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_OrganisationAdministrative");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionOrganisationPedagogique", b =>
                {
                    b.Property<bool>("Ajour")
                        .HasColumnType("bit")
                        .HasColumnName("AJour");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Disp")
                        .HasColumnType("bit");

                    b.Property<string>("LibeOrgaPeda")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_OrganisationPedagogique");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionHandicap", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionHandicap");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionPersonel", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dateaffectation")
                        .HasColumnType("date")
                        .HasColumnName("dateaffectation");

                    b.Property<string>("DatenotePead")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("datenotePead");

                    b.Property<DateTime?>("Daterecrutement")
                        .HasColumnType("date")
                        .HasColumnName("daterecrutement");

                    b.Property<DateTime?>("Daterespons")
                        .HasColumnType("date")
                        .HasColumnName("daterespons");

                    b.Property<int>("IdenUniq")
                        .HasColumnType("int");

                    b.Property<string>("IdenUniqMatrCnss")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGrad")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNiveEtud")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPren")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notePead");

                    b.Property<string>("StructureAttache")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Inspection_RepartitionPersonel");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionPersonelFonction", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionPersonelFonction");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionTrancheAge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionTrancheAge");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionTrancheAgeArretEtude", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionTrancheAgeArretEtude");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionTrancheAgeBeneficaire", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionTrancheAgeBeneficaire");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionTrancheAgeTypePriseEnCharge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTranAge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeTypePrisChar");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionTrancheAgeTypePriseEnCharge");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionRepartitionTypePriseEnCharge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypePrisChar")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeTypePrisChar");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_Inspection_RepartitionTypePriseEnCharge");
                });

            modelBuilder.Entity("METABack.Entities.ViewInspectionStat", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<int?>("AnneVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)");

                    b.Property<string>("CodeComm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCommFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateVisiInsp")
                        .HasColumnType("date");

                    b.Property<string>("DeduGene")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Arabic_CI_AS");

                    b.Property<string>("JourSemaVisiInsp")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("JourVisiInsp")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeRect")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypeInsp")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeZone");

                    b.Property<string>("Libegrouutil")
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("LIBEGROUUTIL");

                    b.Property<string>("Matr")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MATR");

                    b.Property<string>("MoisVisiInsp")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("NomInspecteur2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nomprenutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMPRENUTIL");

                    b.Property<int>("NumeVisiInsp")
                        .HasColumnType("int");

                    b.Property<string>("Personnel")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("QuarVisiInsp")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.ToView("View_Inspection_Stat");
                });

            modelBuilder.Entity("METABack.Entities.ViewIntervention", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<bool?>("Checked")
                        .HasColumnType("bit")
                        .HasColumnName("checked");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInterv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeCommEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("Libeinterv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("libeinterv");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("View_Intervention");
                });

            modelBuilder.Entity("METABack.Entities.ViewInventaireEtablissement", b =>
                {
                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdrePersFond")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CodeDele")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDipl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGenr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeNiveEtud")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePostFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSect")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSituFami")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateCrea")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeciOuve")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeliv")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDemaActi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDepoCahiChar")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateNaisFond")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDipl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNiveEtud")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuNaisFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MatrFisc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPrenFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombEnfa")
                        .HasColumnType("int");

                    b.Property<string>("NumeDeciOuve")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumePiecIden")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prof")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Tele")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.ToView("View_Inventaire_Etablissement");
                });

            modelBuilder.Entity("METABack.Entities.ViewMessageDetail", b =>
                {
                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeTypeM")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeUtilFrom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutil");

                    b.Property<DateTime?>("DateEnvoi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datereception")
                        .HasColumnType("datetime");

                    b.Property<int>("IdMessage")
                        .HasColumnType("int")
                        .HasColumnName("idMessage");

                    b.Property<int?>("IdmessageParent")
                        .HasColumnType("int")
                        .HasColumnName("Idmessage_Parent");

                    b.Property<string>("LibeTypeM")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Lu")
                        .HasColumnType("int")
                        .HasColumnName("lu");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mail");

                    b.Property<string>("NomPrenUtil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Priority")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Message_detail");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureCategorieRubriqueInspection", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeCateRubrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeCateRubrInsp")
                        .HasMaxLength(305)
                        .HasColumnType("nvarchar(305)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_CategorieRubriqueInspection");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureCommune", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeComm")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_Commune");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureDelegation", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeDele")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_Delegation");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureDelegation2", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeDele")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(104)
                        .HasColumnType("nvarchar(104)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_Delegation2");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureEquipement", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CaraEqui")
                        .HasColumnType("text")
                        .UseCollation("Arabic_CI_AS");

                    b.Property<string>("CodeEqui")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEqui")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEqui")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibeTypeEqui")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_Equipement");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureGouvernorat", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeDist")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_Gouvernorat");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureRubriqueInspection", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeCateRubrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeRubrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeCateRubrInsp")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeRubrInsp")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_RubriqueInspection");
                });

            modelBuilder.Entity("METABack.Entities.ViewNomenclatureRubriqueInspection2", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit");

                    b.Property<string>("CodeCateRubrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeRubrInsp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeRubrInsp")
                        .HasMaxLength(556)
                        .HasColumnType("nvarchar(556)");

                    b.Property<int?>("OrdrAffi")
                        .HasColumnType("int");

                    b.ToView("View_Nomenclature_RubriqueInspection2");
                });

            modelBuilder.Entity("METABack.Entities.ViewPassation", b =>
                {
                    b.Property<string>("ActivitePas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adirecteur")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADirecteur");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Arefrence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodePas")
                        .HasColumnType("int")
                        .HasColumnName("codePas");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DatePas")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("Directeur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtabPas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("Moispassation")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("moispassation");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Refrence")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refrence");

                    b.ToView("view_passation");
                });

            modelBuilder.Entity("METABack.Entities.ViewProposition", b =>
                {
                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeNatPro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodePro")
                        .HasColumnType("int")
                        .HasColumnName("codePro");

                    b.Property<string>("CodeTypePro")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DatePro")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<string>("LibeNatPro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Libegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegouv");

                    b.Property<string>("LibetypePro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Moisproposition")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)")
                        .HasColumnName("moisproposition");

                    b.Property<string>("Nomprenutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nomprenutil");

                    b.Property<string>("Sujet")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("view_proposition");
                });

            modelBuilder.Entity("METABack.Entities.ViewRapportActivite", b =>
                {
                    b.Property<string>("ActiviteAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<int>("CodeAct")
                        .HasColumnType("int")
                        .HasColumnName("codeAct");

                    b.Property<string>("CodeNatAct")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DateAct")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeGouv");

                    b.Property<string>("LibeNatAct")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibesecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LieuAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbFemme")
                        .HasColumnType("int");

                    b.Property<int?>("NbHomme")
                        .HasColumnType("int");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("RowNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("SujetAct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Typepart")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Rapport_Activite");
                });

            modelBuilder.Entity("METABack.Entities.ViewRapportEvent", b =>
                {
                    b.Property<string>("ActiviteEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<int>("CodeEvent")
                        .HasColumnType("int")
                        .HasColumnName("codeEvent");

                    b.Property<string>("CodeNivFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeSecFor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DateEvent")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("InvesEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeGouv");

                    b.Property<string>("LibeNatInv")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNivFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibesecFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LieuEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NbFemmeC")
                        .HasColumnType("int");

                    b.Property<int?>("NbFemmeE")
                        .HasColumnType("int");

                    b.Property<int?>("NbHommeC")
                        .HasColumnType("int");

                    b.Property<int?>("NbHommeE")
                        .HasColumnType("int");

                    b.Property<string>("NomEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PrixEvent")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RowNumber")
                        .HasColumnType("bigint");

                    b.ToView("view_Rapport_Event");
                });

            modelBuilder.Entity("METABack.Entities.ViewRapportPassation", b =>
                {
                    b.Property<string>("ActivitePas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adirecteur")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ADirecteur");

                    b.Property<int?>("Annescol")
                        .HasColumnType("int");

                    b.Property<string>("Arefrence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CodePas")
                        .HasColumnType("int")
                        .HasColumnName("codePas");

                    b.Property<string>("Codegouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutil")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeutilM")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeutilrapport")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeutilrapport");

                    b.Property<DateTime?>("DatePas")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreation")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Datemodification")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Daterapport")
                        .HasColumnType("datetime")
                        .HasColumnName("daterapport");

                    b.Property<string>("Directeur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EtabPas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeGouv");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Participant")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Refrence")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("refrence");

                    b.Property<long?>("RowNumber")
                        .HasColumnType("bigint");

                    b.ToView("view_rapport_Passation");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionClub", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Codeetab1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codeetab1");

                    b.Property<string>("LibeClub")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<int?>("Nbseance")
                        .HasColumnType("int")
                        .HasColumnName("nbseance");

                    b.Property<string>("NomClub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_RepartitionClub");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionClubgeneral", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab1")
                        .HasMaxLength(81)
                        .HasColumnType("nvarchar(81)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NbInscrit")
                        .HasColumnType("int");

                    b.Property<string>("PrixClub")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_RepartitionClubgeneral");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleve", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Couverture")
                        .HasColumnType("float")
                        .HasColumnName("couverture");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleve");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveEtatParent", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtatPare")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveEtatParents");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveEtatPsycologique", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtatPsyc")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveEtatPsycologique");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveEtatSante", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtatSant")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveEtatSante");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveGroupeTrancheAge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombGrou")
                        .HasColumnType("int");

                    b.Property<int?>("NombPersPourGrou")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveGroupeTrancheAge");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveHandicap", b =>
                {
                    b.Property<int?>("AnneNais")
                        .HasColumnType("int");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDegrHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInteHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypeHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumeElev")
                        .HasColumnType("int");

                    b.Property<bool?>("SuiviCentSpec")
                        .HasColumnType("bit");

                    b.ToView("View_RepartitionEleveHandicap");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveHandicapListe", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDegrHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInteHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeHand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomPren")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NumeElev")
                        .HasColumnType("int");

                    b.Property<bool?>("SuiviCentSpec")
                        .HasColumnType("bit");

                    b.ToView("View_RepartitionEleveHandicap_liste");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveLangueMaternelle", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeLangMate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveLangueMaternelle");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveNationalite", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNati")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveNationalite");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveNiveauEtudeMere", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveNiveauEtudeMere");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveNiveauEtudePere", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveNiveauEtudePere");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveNiveauSalaireParent", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNiveSala")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveNiveauSalaireParents");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionElevePriseCharge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypePrisChar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionElevePriseCharge");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveProfessionMere", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeProf")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveProfessionMere");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveProfessionPere", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeProf")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveProfessionPere");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveTrancheAge", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Couverture")
                        .HasColumnType("float")
                        .HasColumnName("couverture");

                    b.Property<string>("DepoCahiCharPrep")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.Property<int>("NumeGrou")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveTrancheAge");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveTrancheAgeArretEtude", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveTrancheAgeArretEtude");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveTrancheAgeBeneficaire", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveTrancheAgeBeneficaire");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveTrancheAgeTypePrisChar", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTranAge")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypePrisChar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveTrancheAgeTypePrisChar");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEleveTypeInscription", b =>
                {
                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeTypeInsc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NombFemi")
                        .HasColumnType("int");

                    b.Property<int?>("NombMasc")
                        .HasColumnType("int");

                    b.Property<int?>("NombTota")
                        .HasColumnType("int");

                    b.ToView("View_RepartitionEleveTypeInscription");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionEnfantNe", b =>
                {
                    b.Property<string>("AdrePers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateNais")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datearret")
                        .HasColumnType("date")
                        .HasColumnName("datearret");

                    b.Property<DateTime?>("Dateinscrit")
                        .HasColumnType("date")
                        .HasColumnName("dateinscrit");

                    b.Property<string>("EtatEnfant")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("EtatSante")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Idenfant")
                        .HasColumnType("int")
                        .HasColumnName("idenfant");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtatFam")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNaturePere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libegenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libegenr");

                    b.Property<string>("LieuNais")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Motifarret")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("motifarret");

                    b.Property<string>("Nompere")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nompere");

                    b.Property<string>("Nomprenom")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nomprenom");

                    b.Property<string>("NumTel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeCin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NumeCIN");

                    b.Property<string>("Profession")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_RepartitionEnfantNE");
                });

            modelBuilder.Entity("METABack.Entities.ViewRepartitionSignalisation", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasColumnName("acti");

                    b.Property<string>("AdresseConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Anomalie")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Avis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChefService")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeResponsable")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CodeSignalisation")
                        .HasColumnType("int");

                    b.Property<string>("CodeStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ConusltatEnfance")
                        .HasColumnType("bit")
                        .HasColumnName("conusltatEnfance");

                    b.Property<DateTime?>("DateAnalyse")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateChefService")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateDepot")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateInfoInspecteur")
                        .HasColumnType("date");

                    b.Property<string>("DateSignalisation")
                        .HasMaxLength(61)
                        .HasColumnType("nvarchar(61)");

                    b.Property<DateTime?>("Datecreationrapport")
                        .HasColumnType("datetime")
                        .HasColumnName("datecreationrapport");

                    b.Property<DateTime?>("Datevisite")
                        .HasColumnType("date")
                        .HasColumnName("datevisite");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Enfance")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Etablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fichier")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fichier");

                    b.Property<string>("Inspecteur2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtatSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("libeEtatSignalisation");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Methode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MethodeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoisSignalisation")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MotifSupression")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NomConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroDepot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Numrapport")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("ObservationChefService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsable")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResponsableSignalisation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResultatChefService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextAnalyse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEtablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeSign")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ville")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VilleConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_RepartitionSignalisation");
                });

            modelBuilder.Entity("METABack.Entities.ViewRessourceHumain", b =>
                {
                    b.Property<string>("AdrePers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<double?>("Anci")
                        .HasColumnType("float");

                    b.Property<int?>("AnneAff")
                        .HasColumnType("int");

                    b.Property<int?>("AnneRec")
                        .HasColumnType("int");

                    b.Property<int?>("AnneRes")
                        .HasColumnType("int");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Cadreinspection")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateCin")
                        .HasColumnType("datetime")
                        .HasColumnName("DateCIN");

                    b.Property<int?>("DateNais")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateaffectation")
                        .HasColumnType("date")
                        .HasColumnName("dateaffectation");

                    b.Property<DateTime?>("DatenotePead")
                        .HasColumnType("date")
                        .HasColumnName("datenotePead");

                    b.Property<DateTime?>("Daterecrutement")
                        .HasColumnType("date")
                        .HasColumnName("daterecrutement");

                    b.Property<DateTime?>("Daterespons")
                        .HasColumnType("date")
                        .HasColumnName("daterespons");

                    b.Property<bool?>("Elig")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HasIdenUniqMatrCnss")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("hasIdenUniqMatrCnss");

                    b.Property<int>("IdenUniq")
                        .HasColumnType("int");

                    b.Property<string>("IdenUniqMatrCnss")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeCommEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeCorp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDeleEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDelePers")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDipl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LibeDistEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDistPers")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouvEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouvPers")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGrad")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeNiveEtud")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeQual")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeReveMens")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSituFami")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSituProf")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeStruAtta")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("libeStruAtta");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoisAff")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MoisRec")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MoisRes")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NomPren")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotePead")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notePead");

                    b.Property<string>("NumeCin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NumeCIN");

                    b.Property<bool?>("Spec")
                        .HasColumnType("bit");

                    b.Property<string>("TelGsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TelGSM");

                    b.ToView("View_RessourceHumain");
                });

            modelBuilder.Entity("METABack.Entities.ViewSignalisation", b =>
                {
                    b.Property<bool?>("Acti")
                        .HasColumnType("bit")
                        .HasColumnName("acti");

                    b.Property<string>("AdresseConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("Avis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChefService")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeInspecteur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeResponsable")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CodeSignalisation")
                        .HasColumnType("int");

                    b.Property<string>("CodeStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ConusltatEnfance")
                        .HasColumnType("bit")
                        .HasColumnName("conusltatEnfance");

                    b.Property<DateTime?>("DateAnalyse")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateChefService")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateCreation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateDepot")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateInfoInspecteur")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateSignalisation")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datecreationrapport")
                        .HasColumnType("datetime")
                        .HasColumnName("datecreationrapport");

                    b.Property<DateTime?>("Datevisite")
                        .HasColumnType("date")
                        .HasColumnName("datevisite");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Etablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fichier")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fichier");

                    b.Property<string>("Inspecteur2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Methode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MethodeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MotifSupression")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NomConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NomInformateur")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroDepot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Numrapport")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("ObservationChefService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Responsable")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ResultatChefService")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextAnalyse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeEtablissement")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeSign")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeSignalisation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ville")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VilleConcerne")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Signalisation");
                });

            modelBuilder.Entity("METABack.Entities.ViewTraceUtilisateur", b =>
                {
                    b.Property<string>("Codeenti")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEENTI");

                    b.Property<string>("Codetypeoper")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODETYPEOPER");

                    b.Property<string>("Codeutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL");

                    b.Property<DateTime>("Datetrac")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETRAC");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libeenti")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LIBEENTI");

                    b.Property<string>("Libepack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LIBEPACK");

                    b.Property<string>("Libetrac")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("LIBETRAC");

                    b.Property<string>("Linktrac")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("LINKTRAC");

                    b.Property<string>("Nomprenutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMPRENUTIL");

                    b.Property<decimal>("Numetrac")
                        .HasColumnType("numeric(10,0)")
                        .HasColumnName("NUMETRAC");

                    b.Property<string>("Pkenti")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PKENTI");

                    b.ToView("View_TraceUtilisateur");
                });

            modelBuilder.Entity("METABack.Entities.ViewTraceUtilisateur1", b =>
                {
                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Datetrac")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETRAC");

                    b.Property<string>("JourSemaTrac")
                        .HasMaxLength(63)
                        .HasColumnType("nvarchar(63)");

                    b.Property<string>("JourTrac")
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libeenti")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LIBEENTI");

                    b.Property<string>("Libegrouutil")
                        .IsRequired()
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("LIBEGROUUTIL");

                    b.Property<string>("Libepack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("LIBEPACK");

                    b.Property<string>("Libetrac")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("LIBETRAC");

                    b.Property<string>("Libetypeopertrac")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("LIBETYPEOPERTRAC");

                    b.Property<string>("Matr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MATR");

                    b.Property<string>("MoisTrac")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Nomprenutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMPRENUTIL");

                    b.Property<decimal>("Numetrac")
                        .HasColumnType("numeric(10,0)")
                        .HasColumnName("NUMETRAC");

                    b.Property<string>("QuarTrac")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.ToView("View_TraceUtilisateurs");
                });

            modelBuilder.Entity("METABack.Entities.ViewUtilisateur", b =>
                {
                    b.Property<string>("CodeCommFonc")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeUtilPare")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Codegrouutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEGROUUTIL");

                    b.Property<string>("Codenivehier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODENIVEHIER");

                    b.Property<string>("Codeutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL");

                    b.Property<DateTime?>("Datemaj")
                        .HasColumnType("datetime")
                        .HasColumnName("DATEMAJ");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("Etat")
                        .HasColumnType("bit");

                    b.Property<string>("Gsm")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("GSM");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Libegrouutil")
                        .IsRequired()
                        .HasMaxLength(510)
                        .HasColumnType("nvarchar(510)")
                        .HasColumnName("LIBEGROUUTIL");

                    b.Property<string>("Matr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MATR");

                    b.Property<string>("Motpassutil")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MOTPASSUTIL");

                    b.Property<string>("Nomprenutil")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NOMPRENUTIL");

                    b.Property<string>("SkypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SkypeID");

                    b.Property<string>("Tele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("View_Utilisateur");
                });

            modelBuilder.Entity("METABack.Entities.ViewVeetablissement", b =>
                {
                    b.Property<string>("AdreEtab")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AnneDeciOuvr")
                        .HasColumnType("int");

                    b.Property<int?>("AnneFerm")
                        .HasColumnType("int");

                    b.Property<int>("AnneScol")
                        .HasColumnType("int");

                    b.Property<string>("CausFerm")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CodeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodePostEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeTypeEtab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateDemaActi")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateFerm")
                        .HasColumnType("datetime");

                    b.Property<double?>("FraiInscParAnne")
                        .HasColumnType("float");

                    b.Property<double?>("FraiMensActiNorm")
                        .HasColumnType("float");

                    b.Property<string>("LibeComm")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeCommEtab")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeDele")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeDiplFond")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LibeDist")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeEtab")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LibeEtatEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGenrFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeGouv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeNiveEtudFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeOuveEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSect")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeSituFamiFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LibeTypeEtatEtab")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("LibeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LieuNaisFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoisDeciOuvr")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MoisFerm")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NomPrenFond")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumePiecIden")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("QuarFerm")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Tele")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.ToView("View_VEEtablissement");
                });

            modelBuilder.Entity("NomenclatureCategorieRubriqueTypeInspection", b =>
                {
                    b.Property<string>("CodeTypeInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCateRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeTypeInsp", "CodeCateRubrInsp");

                    b.HasIndex("CodeCateRubrInsp");

                    b.ToTable("Nomenclature_CategorieRubriqueTypeInspection", (string)null);
                });

            modelBuilder.Entity("NomenclatureConstatationRubriqueInspection", b =>
                {
                    b.Property<string>("CodeRubrInsp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeCons")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodeRubrInsp", "CodeCons");

                    b.HasIndex("CodeCons");

                    b.ToTable("Nomenclature_ConstatationRubriqueInspection", (string)null);
                });

            modelBuilder.Entity("SecuriteEtablissement", b =>
                {
                    b.Property<string>("Codeutil")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CODEUTIL")
                        .HasComment("Code commerciale (Login)");

                    b.Property<string>("CodeEtab")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Code établissement");

                    b.HasKey("Codeutil", "CodeEtab");

                    b.HasIndex("CodeEtab");

                    b.ToTable("Securite_Etablissement", (string)null);
                });

            modelBuilder.Entity("EtablissementAnomalieEtablissement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureAnomalie", null)
                        .WithMany()
                        .HasForeignKey("CodeAnom")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_AnomalieEtablissement_Nomenclature_Anomalie");

                    b.HasOne("METABack.Entities.EtablissementAnomalie", null)
                        .WithMany()
                        .HasForeignKey("Nume", "CodeEtab", "AnneScol")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_AnomalieEtablissement_Etablissement_Anomalie");
                });

            modelBuilder.Entity("InspectionAnomalie", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureAnomalie", null)
                        .WithMany()
                        .HasForeignKey("CodeAnom")
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Anomalie_Nomenclature_Anomalie");

                    b.HasOne("METABack.Entities.InspectionVisiteInspection", null)
                        .WithMany()
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Anomalie_Inspection_VisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.EleveEleveHandicap", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureDedreHandicap", "CodeDegrHandNavigation")
                        .WithMany("EleveEleveHandicaps")
                        .HasForeignKey("CodeDegrHand")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_EleveHandicap_Nomenclature_DedreHandicap");

                    b.HasOne("METABack.Entities.NomenclatureGenre", "CodeGenrNavigation")
                        .WithMany("EleveEleveHandicaps")
                        .HasForeignKey("CodeGenr")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_EleveHandicap_Nomenclature_Genre");

                    b.HasOne("METABack.Entities.NomenclatureIntergrationHandicap", "CodeInteHandNavigation")
                        .WithMany("EleveEleveHandicaps")
                        .HasForeignKey("CodeInteHand")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_EleveHandicap_Nomenclature_IntergrationHandicap");

                    b.HasOne("METABack.Entities.NomenclatureTypeHandicap", "CodeTypeHandNavigation")
                        .WithMany("EleveEleveHandicaps")
                        .HasForeignKey("CodeTypeHand")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_EleveHandicap_Nomenclature_TypeHandicap");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveEleveHandicaps")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_EleveHandicap_Etablissement_FicheEtablissement");

                    b.Navigation("CodeDegrHandNavigation");

                    b.Navigation("CodeGenrNavigation");

                    b.Navigation("CodeInteHandNavigation");

                    b.Navigation("CodeTypeHandNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionEtatParent", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEtatParent", "CodeEtatPareNavigation")
                        .WithMany("EleveRepartitionEtatParents")
                        .HasForeignKey("CodeEtatPare")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionEtatParents_Nomenclature_EtatParent");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionEtatParents")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionEtatParents_Etablissement_FicheEtablissement");

                    b.Navigation("CodeEtatPareNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionEtatPsycologique", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEtatPsycologique", "CodeEtatPsycNavigation")
                        .WithMany("EleveRepartitionEtatPsycologiques")
                        .HasForeignKey("CodeEtatPsyc")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionEtatPsycologique_Nomenclature_EtatPsycologique");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionEtatPsycologiques")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionEtatPsycologique_Etablissement_FicheEtablissement");

                    b.Navigation("CodeEtatPsycNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionEtatSante", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEtatSante", "CodeEtatSantNavigation")
                        .WithMany("EleveRepartitionEtatSantes")
                        .HasForeignKey("CodeEtatSant")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionEtatSante_Nomenclature_EtatSante");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionEtatSantes")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionEtatSante_Etablissement_FicheEtablissement");

                    b.Navigation("CodeEtatSantNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionGroupeTrancheAge", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTrancheAge", "CodeTranAgeNavigation")
                        .WithMany("EleveRepartitionGroupeTrancheAges")
                        .HasForeignKey("CodeTranAge")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionGroupeTrancheAge_Nomenclature_TrancheAge1");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionGroupeTrancheAges")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionGroupeTrancheAge_Etablissement_FicheEtablissement1");

                    b.Navigation("CodeTranAgeNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionLangueMaternelle", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureLangueMaternelle", "CodeLangMateNavigation")
                        .WithMany("EleveRepartitionLangueMaternelles")
                        .HasForeignKey("CodeLangMate")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionLangueMaternelle_Nomenclature_LangueMaternelle");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionLangueMaternelles")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionLangueMaternelle_Etablissement_FicheEtablissement");

                    b.Navigation("CodeLangMateNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNationalite", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureNationalite", "CodeNatiNavigation")
                        .WithMany("EleveRepartitionNationalites")
                        .HasForeignKey("CodeNati")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNationalite_Nomenclature_Nationalite");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionNationalites")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNationalite_Etablissement_FicheEtablissement");

                    b.Navigation("CodeNatiNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNiveauEtudeMere", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureNiveauEtude", "CodeNiveEtudNavigation")
                        .WithMany("EleveRepartitionNiveauEtudeMeres")
                        .HasForeignKey("CodeNiveEtud")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNiveauEtudeMere_Nomenclature_NiveauEtude");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionNiveauEtudeMeres")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNiveauEtudeMere_Etablissement_FicheEtablissement");

                    b.Navigation("CodeNiveEtudNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNiveauEtudePere", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureNiveauEtude", "CodeNiveEtudNavigation")
                        .WithMany("EleveRepartitionNiveauEtudePeres")
                        .HasForeignKey("CodeNiveEtud")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNiveauEtudePere_Nomenclature_NiveauEtude");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionNiveauEtudePeres")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNiveauEtudePere_Etablissement_FicheEtablissement");

                    b.Navigation("CodeNiveEtudNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionNiveauSalaire", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureNiveauSalaire", "CodeNiveSalaNavigation")
                        .WithMany("EleveRepartitionNiveauSalaires")
                        .HasForeignKey("CodeNiveSala")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNiveauSalaire_Nomenclature_NiveauSalaire");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionNiveauSalaires")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionNiveauSalaire_Etablissement_FicheEtablissement");

                    b.Navigation("CodeNiveSalaNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionProfessionMere", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureProfession", "CodeProfNavigation")
                        .WithMany("EleveRepartitionProfessionMeres")
                        .HasForeignKey("CodeProf")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionProfessionMere_Nomenclature_Profession");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionProfessionMeres")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionProfessionMere_Etablissement_FicheEtablissement");

                    b.Navigation("CodeProfNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionProfessionPere", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureProfession", "CodeProfNavigation")
                        .WithMany("EleveRepartitionProfessionPeres")
                        .HasForeignKey("CodeProf")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionProfessionPere_Nomenclature_Profession");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionProfessionPeres")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionProfessionPere_Etablissement_FicheEtablissement");

                    b.Navigation("CodeProfNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAge", b =>
                {
                    b.HasOne("METABack.Entities.EleveRepartitionGroupeTrancheAge", "EleveRepartitionGroupeTrancheAge")
                        .WithMany("EleveRepartitionTrancheAges")
                        .HasForeignKey("CodeEtab", "AnneScol", "CodeTranAge")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAge_Eleve_RepartitionGroupeTrancheAge");

                    b.Navigation("EleveRepartitionGroupeTrancheAge");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeArretEtude", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTrancheAge", "CodeTranAgeNavigation")
                        .WithMany("EleveRepartitionTrancheAgeArretEtudes")
                        .HasForeignKey("CodeTranAge")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeArretEtude_Nomenclature_TrancheAge");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionTrancheAgeArretEtudes")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeArretEtude_Etablissement_FicheEtablissement");

                    b.Navigation("CodeTranAgeNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeBeneficaire", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTrancheAge", "CodeTranAgeNavigation")
                        .WithMany("EleveRepartitionTrancheAgeBeneficaires")
                        .HasForeignKey("CodeTranAge")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeBeneficaire_Nomenclature_TrancheAge");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionTrancheAgeBeneficaires")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeBeneficaire_Etablissement_FicheEtablissement");

                    b.Navigation("CodeTranAgeNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTrancheAgeTypePriseEnCharge", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTrancheAge", "CodeTranAgeNavigation")
                        .WithMany("EleveRepartitionTrancheAgeTypePriseEnCharges")
                        .HasForeignKey("CodeTranAge")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeNomenclature_TrancheAge");

                    b.HasOne("METABack.Entities.NomenclatureTypePriseEnCharge", "CodeTypePrisCharNavigation")
                        .WithMany("EleveRepartitionTrancheAgeTypePriseEnCharges")
                        .HasForeignKey("CodeTypePrisChar")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeTypePriseEnCharge_Nomenclature_TypePriseEnCharge");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionTrancheAgeTypePriseEnCharges")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTrancheAgeTypePriseEnCharge_Etablissement_FicheEtablissement");

                    b.Navigation("CodeTranAgeNavigation");

                    b.Navigation("CodeTypePrisCharNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTypeInscription", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeInscription", "CodeTypeInscNavigation")
                        .WithMany("EleveRepartitionTypeInscriptions")
                        .HasForeignKey("CodeTypeInsc")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTypeInscription_Nomenclature_TypeInscription");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionTypeInscriptions")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTypeInscription_Etablissement_FicheEtablissement");

                    b.Navigation("CodeTypeInscNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionTypePriseEnCharge", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypePriseEnCharge", "CodeTypePrisCharNavigation")
                        .WithMany("EleveRepartitionTypePriseEnCharges")
                        .HasForeignKey("CodeTypePrisChar")
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTypePriseEnCharge_Nomenclature_TypePriseEnCharge");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EleveRepartitionTypePriseEnCharges")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Eleve_RepartitionTypePriseEnCharge_Etablissement_FicheEtablissement");

                    b.Navigation("CodeTypePrisCharNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EnfantNecessite", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCommune", "CodeCommNavigation")
                        .WithMany("EnfantNecessites")
                        .HasForeignKey("CodeComm")
                        .HasConstraintName("FK_ENFANT_necessite_Nomenclature_Commune");

                    b.HasOne("METABack.Entities.NomenclatureDelegation", "CodeDeleNavigation")
                        .WithMany("EnfantNecessites")
                        .HasForeignKey("CodeDele")
                        .HasConstraintName("FK_ENFANT_necessite_Nomenclature_Delegation");

                    b.HasOne("METABack.Entities.NomenclatureTypeEtablissement", "CodeTypeEtabNavigation")
                        .WithMany("EnfantNecessites")
                        .HasForeignKey("CodeTypeEtab")
                        .HasConstraintName("FK_ENFANT_necessite_Nomenclature_TypeEtablissement");

                    b.Navigation("CodeCommNavigation");

                    b.Navigation("CodeDeleNavigation");

                    b.Navigation("CodeTypeEtabNavigation");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementAnomalie", b =>
                {
                    b.HasOne("METABack.Entities.SecuriteUtilisateur", "CodeutilNavigation")
                        .WithMany("EtablissementAnomalies")
                        .HasForeignKey("Codeutil")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Anomalie_SECURITE_UTILISATEUR");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EtablissementAnomalies")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Anomalie_Etablissement_FicheEtablissement");

                    b.Navigation("CodeutilNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEquipement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEquipement", "CodeEquiNavigation")
                        .WithMany("EtablissementEquipements")
                        .HasForeignKey("CodeEqui")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Equipement_Nomenclature_Equipement");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EtablissementEquipements")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Equipement_Etablissement_FicheEtablissement");

                    b.Navigation("CodeEquiNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEspace", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEspace", "CodeTypeEspaNavigation")
                        .WithMany("EtablissementEspaces")
                        .HasForeignKey("CodeTypeEspa")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Espace_Nomenclature_TypeEspace");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EtablissementEspaces")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Espace_Etablissement_FicheEtablissement");

                    b.Navigation("CodeTypeEspaNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEspaceCaracteristiqueEspace", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCaracteristiqueEspace", "CodeCaraEspaNavigation")
                        .WithMany("EtablissementEspaceCaracteristiqueEspaces")
                        .HasForeignKey("CodeCaraEspa")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_EspaceCaracteristiqueEspace_Nomenclature_CaracteristiqueEspace");

                    b.HasOne("METABack.Entities.EtablissementEspace", "EtablissementEspace")
                        .WithMany("EtablissementEspaceCaracteristiqueEspaces")
                        .HasForeignKey("CodeEtab", "AnneScol", "NumeEspa")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_EspaceCaracteristiqueEspace_Etablissement_Espace");

                    b.Navigation("CodeCaraEspaNavigation");

                    b.Navigation("EtablissementEspace");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementFicheEtablissement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureDelegation", "CodeDeleNavigation")
                        .WithMany("EtablissementFicheEtablissements")
                        .HasForeignKey("CodeDele")
                        .HasConstraintName("FK_Etablissement_FicheEtablissement_Nomenclature_Delegation");

                    b.HasOne("METABack.Entities.NomenclatureEtablissement", "CodeEtabNavigation")
                        .WithMany("EtablissementFicheEtablissements")
                        .HasForeignKey("CodeEtab")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_FicheEtablissement_Nomenclature_Etablissement");

                    b.HasOne("METABack.Entities.NomenclatureOuvertureEtablissement", "CodeOuveEtabNavigation")
                        .WithMany("EtablissementFicheEtablissements")
                        .HasForeignKey("CodeOuveEtab")
                        .HasConstraintName("FK_Etablissement_FicheEtablissement_Nomenclature_OuvertureEtablissement");

                    b.Navigation("CodeDeleNavigation");

                    b.Navigation("CodeEtabNavigation");

                    b.Navigation("CodeOuveEtabNavigation");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementInfrastructure", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEmplacementSiege", "CodeEmplSiegNavigation")
                        .WithMany("EtablissementInfrastructures")
                        .HasForeignKey("CodeEmplSieg")
                        .HasConstraintName("FK_Etablissement_Infrastructure_Nomenclature_EmplacementSiege");

                    b.HasOne("METABack.Entities.NomenclatureRegimePropriete", "CodeRegiPropNavigation")
                        .WithMany("EtablissementInfrastructures")
                        .HasForeignKey("CodeRegiProp")
                        .HasConstraintName("FK_Etablissement_Infrastructure_Nomenclature_RegimePropriete");

                    b.HasOne("METABack.Entities.NomenclatureTypeCloture", "CodeTypeClotNavigation")
                        .WithMany("EtablissementInfrastructures")
                        .HasForeignKey("CodeTypeClot")
                        .HasConstraintName("FK_Etablissement_Infrastructure_Nomenclature_TypeCloture");

                    b.HasOne("METABack.Entities.NomenclatureTypePropriete", "CodeTypePropNavigation")
                        .WithMany("EtablissementInfrastructures")
                        .HasForeignKey("CodeTypeProp")
                        .HasConstraintName("FK_Etablissement_Infrastructure_Nomenclature_TypePropriete");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithOne("EtablissementInfrastructure")
                        .HasForeignKey("METABack.Entities.EtablissementInfrastructure", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Infrastructure_Etablissement_FicheEtablissement");

                    b.Navigation("CodeEmplSiegNavigation");

                    b.Navigation("CodeRegiPropNavigation");

                    b.Navigation("CodeTypeClotNavigation");

                    b.Navigation("CodeTypePropNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementInfrastructureAutre", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureInfrastrcture", "CodetypeInfraNavigation")
                        .WithMany("EtablissementInfrastructureAutres")
                        .HasForeignKey("CodetypeInfra")
                        .IsRequired()
                        .HasConstraintName("FK_[Etablissement_Infrastructure_Autre_Nomenclature_Infrastrcture");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EtablissementInfrastructureAutres")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_Autre_Etablissement_FicheEtablissement");

                    b.Navigation("CodetypeInfraNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementIntervention", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureInterventionnecessaire", "CodeIntervNavigation")
                        .WithMany("EtablissementInterventions")
                        .HasForeignKey("CodeInterv")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Intervention_Nomenclature_Infrastrcture");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("EtablissementInterventions")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_Intervention_Etablissement_FicheEtablissement");

                    b.Navigation("CodeIntervNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementOrganisationAdministrative", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureOrganisationAdministrative", "CodeOrgaAdmiNavigation")
                        .WithMany("EtablissementOrganisationAdministratives")
                        .HasForeignKey("CodeOrgaAdmi")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_OrganisationAdministrative_Nomenclature_OrganisationAdministrative");

                    b.Navigation("CodeOrgaAdmiNavigation");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementOrganisationPedagogique", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureOrganisationPedagogique", "CodeOrgaPedaNavigation")
                        .WithMany("EtablissementOrganisationPedagogiques")
                        .HasForeignKey("CodeOrgaPeda")
                        .IsRequired()
                        .HasConstraintName("FK_Etablissement_OrganisationPedagogique_Nomenclature_OrganisationPedagogique");

                    b.Navigation("CodeOrgaPedaNavigation");
                });

            modelBuilder.Entity("METABack.Entities.InfrastructureCaracteristiqueEspaceExterieur", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCaracteristiqueEspaceExterieur", "CodeCaraEspaExteNavigation")
                        .WithMany()
                        .HasForeignKey("CodeCaraEspaExte")
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_CaracteristiqueEspaceExterieur_Nomenclature_CaracteristiqueEspaceExterieur");

                    b.HasOne("METABack.Entities.EtablissementInfrastructure", "EtablissementInfrastructure")
                        .WithMany()
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_CaracteristiqueEspaceExterieur_Etablissement_Infrastructure");

                    b.Navigation("CodeCaraEspaExteNavigation");

                    b.Navigation("EtablissementInfrastructure");
                });

            modelBuilder.Entity("METABack.Entities.InfrastructureEmplacement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEmplacementEtablissement", "CodeEmplNavigation")
                        .WithMany()
                        .HasForeignKey("CodeEmpl")
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_Emplacement_Nomenclature_Emplacement");

                    b.HasOne("METABack.Entities.EtablissementInfrastructure", "EtablissementInfrastructure")
                        .WithMany()
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_Emplacement_Etablissement_Infrastructure");

                    b.Navigation("CodeEmplNavigation");

                    b.Navigation("EtablissementInfrastructure");
                });

            modelBuilder.Entity("METABack.Entities.InfrastructureTypeConnexionInternet", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeConnexionInternet", "CodeTypeConnInteNavigation")
                        .WithMany()
                        .HasForeignKey("CodeTypeConnInte")
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_TypeConnexionInternet_Nomenclature_TypeConnexionInternet");

                    b.HasOne("METABack.Entities.EtablissementInfrastructure", "EtablissementInfrastructure")
                        .WithMany()
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Infrastructure_TypeConnexionInternet_Etablissement_Infrastructure");

                    b.Navigation("CodeTypeConnInteNavigation");

                    b.Navigation("EtablissementInfrastructure");
                });

            modelBuilder.Entity("METABack.Entities.InspectionConstatation", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureRubriqueInspection", "CodeRubrInspNavigation")
                        .WithMany("InspectionConstatations")
                        .HasForeignKey("CodeRubrInsp")
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Constatation_Nomenclature_RubriqueInspection");

                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionConstatations")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Constatation_Inspection_VisiteInspection");

                    b.Navigation("CodeRubrInspNavigation");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionDeductionCategorieRubriqueInspection", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCategorieRubriqueInspection", "CodeCateRubrInspNavigation")
                        .WithMany("InspectionDeductionCategorieRubriqueInspections")
                        .HasForeignKey("CodeCateRubrInsp")
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_DeductionCategorieRubriqueInspection_Nomenclature_CategorieRubriqueInspection");

                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionDeductionCategorieRubriqueInspections")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_DeductionCategorieRubriqueInspection_Inspection_VisiteInspection");

                    b.Navigation("CodeCateRubrInspNavigation");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionEquipement", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionEquipements")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Equipement_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionEspace", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionEspaces")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_espace_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionInfoGenerale", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithOne("InspectionInfoGenerale")
                        .HasForeignKey("METABack.Entities.InspectionInfoGenerale", "NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_InfoGenerale_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionInfrastructure", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany()
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Infrastructure_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionNombreEnfantTrancheAge", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTrancheAge", "CodeTranAgeNavigation")
                        .WithMany("InspectionNombreEnfantTrancheAges")
                        .HasForeignKey("CodeTranAge")
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_NombreEnfantTrancheAge_Nomenclature_TrancheAge");

                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionNombreEnfantTrancheAges")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_NombreEnfantTrancheAge_Inspection_VisiteInspection");

                    b.Navigation("CodeTranAgeNavigation");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionRecification", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureRectification", "CodeRectNavigation")
                        .WithMany("InspectionRecifications")
                        .HasForeignKey("CodeRect")
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Recifications_Nomenclature_rectification");

                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionRecifications")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Recifications_Inspection_VisiteInspection");

                    b.Navigation("CodeRectNavigation");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionHandicap", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionRepartitionHandicaps")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_RepartitionHandicap_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionPersonelFonction", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionRepartitionPersonelFonctions")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_RepartitionPersonelFonction_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionRepartitionTrancheAge", b =>
                {
                    b.HasOne("METABack.Entities.InspectionVisiteInspection", "InspectionVisiteInspection")
                        .WithMany("InspectionRepartitionTrancheAges")
                        .HasForeignKey("NumeVisiInsp", "CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_RepartitionTrancheAge_Inspection_VisiteInspection");

                    b.Navigation("InspectionVisiteInspection");
                });

            modelBuilder.Entity("METABack.Entities.InspectionVisiteInspection", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeInspection", "CodeTypeInspNavigation")
                        .WithMany("InspectionVisiteInspections")
                        .HasForeignKey("CodeTypeInsp")
                        .HasConstraintName("FK_Inspection_VisiteInspection_Nomenclature_TypeInspection");

                    b.Navigation("CodeTypeInspNavigation");
                });

            modelBuilder.Entity("METABack.Entities.MessageFichier", b =>
                {
                    b.HasOne("METABack.Entities.MessageMessage", "IdMessageNavigation")
                        .WithMany()
                        .HasForeignKey("IdMessage")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Fichier_Message_Message");

                    b.Navigation("IdMessageNavigation");
                });

            modelBuilder.Entity("METABack.Entities.MessageGroupe", b =>
                {
                    b.HasOne("METABack.Entities.MessageMessage", "IdMessageNavigation")
                        .WithMany()
                        .HasForeignKey("IdMessage")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Groupe_Message_Message");

                    b.Navigation("IdMessageNavigation");
                });

            modelBuilder.Entity("METABack.Entities.MessageMessage", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeMessage", "CodeTypeMNavigation")
                        .WithMany("MessageMessages")
                        .HasForeignKey("CodeTypeM")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Message_Nomenclature_TypeMessage");

                    b.Navigation("CodeTypeMNavigation");
                });

            modelBuilder.Entity("METABack.Entities.MessageUser", b =>
                {
                    b.HasOne("METABack.Entities.MessageMessage", "IdMessageNavigation")
                        .WithMany("MessageUsers")
                        .HasForeignKey("IdMessage")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User_Message_Message");

                    b.Navigation("IdMessageNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCaracteristiqueEspace", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEspace", "CodeTypeEspaNavigation")
                        .WithMany("NomenclatureCaracteristiqueEspaces")
                        .HasForeignKey("CodeTypeEspa")
                        .HasConstraintName("FK_Nomenclature_CaracteristiqueEspace_Nomenclature_TypeEspace");

                    b.Navigation("CodeTypeEspaNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCategorieRubriqueInspection", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEtablissement", "CodeTypeEtabNavigation")
                        .WithMany("NomenclatureCategorieRubriqueInspections")
                        .HasForeignKey("CodeTypeEtab")
                        .HasConstraintName("FK_Nomenclature_CategorieRubriqueInspection_Nomenclature_TypeEtablissement");

                    b.Navigation("CodeTypeEtabNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDelegation", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureGouvernorat", "CodeGouvNavigation")
                        .WithMany("NomenclatureDelegations")
                        .HasForeignKey("CodeGouv")
                        .HasConstraintName("FK_Nomenclature_Delegation_Nomenclature_Gouvernorat");

                    b.Navigation("CodeGouvNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEquipement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEquipement", "CodeTypeEquiNavigation")
                        .WithMany("NomenclatureEquipements")
                        .HasForeignKey("CodeTypeEqui")
                        .HasConstraintName("FK_Nomenclature_Equipement_Nomenclature_TypeEquipement");

                    b.Navigation("CodeTypeEquiNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtablissement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCommune", "CodeCommNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeComm")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_Commune");

                    b.HasOne("METABack.Entities.NomenclatureDelegation", "CodeDeleNavigation")
                        .WithMany("NomenclatureEtablissementCodeDeleNavigations")
                        .HasForeignKey("CodeDele")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_Delegation");

                    b.HasOne("METABack.Entities.NomenclatureDelegation", "CodeDeleFondNavigation")
                        .WithMany("NomenclatureEtablissementCodeDeleFondNavigations")
                        .HasForeignKey("CodeDeleFond")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_Delegation1");

                    b.HasOne("METABack.Entities.NomenclatureDiplome", "CodeDiplNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeDipl")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_Diplome");

                    b.HasOne("METABack.Entities.NomenclatureNiveauEtude", "CodeNiveEtudNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeNiveEtud")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_NiveauEtude");

                    b.HasOne("METABack.Entities.NomenclatureSecteur", "CodeSectNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeSect")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_Secteur");

                    b.HasOne("METABack.Entities.NomenclatureSituationFamiliale", "CodeSituFamiNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeSituFami")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_SituationFamiliale");

                    b.HasOne("METABack.Entities.NomenclatureTypeEtablissement", "CodeTypeEtabNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeTypeEtab")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_TypeEtablissement");

                    b.HasOne("METABack.Entities.NomenclatureZone", "CodeZoneHabiNavigation")
                        .WithMany("NomenclatureEtablissements")
                        .HasForeignKey("CodeZoneHabi")
                        .HasConstraintName("FK_Nomenclature_Etablissement_Nomenclature_Zone");

                    b.Navigation("CodeCommNavigation");

                    b.Navigation("CodeDeleFondNavigation");

                    b.Navigation("CodeDeleNavigation");

                    b.Navigation("CodeDiplNavigation");

                    b.Navigation("CodeNiveEtudNavigation");

                    b.Navigation("CodeSectNavigation");

                    b.Navigation("CodeSituFamiNavigation");

                    b.Navigation("CodeTypeEtabNavigation");

                    b.Navigation("CodeZoneHabiNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatEtablissement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEtatEtablissement", "CodeTypeEtatEtabNavigation")
                        .WithMany("NomenclatureEtatEtablissements")
                        .HasForeignKey("CodeTypeEtatEtab")
                        .HasConstraintName("FK__Nomenclat__CodeT__3A8CA01F");

                    b.Navigation("CodeTypeEtatEtabNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGouvernorat", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureDistrict", "CodeDistNavigation")
                        .WithMany("NomenclatureGouvernorats")
                        .HasForeignKey("CodeDist")
                        .HasConstraintName("FK_Nomenclature_Gouvernorat_Nomenclature_District");

                    b.Navigation("CodeDistNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOrganisationAdministrative", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEtablissement", "CodeTypeEtabNavigation")
                        .WithMany("NomenclatureOrganisationAdministratives")
                        .HasForeignKey("CodeTypeEtab")
                        .HasConstraintName("FK_Nomenclature_OrganisationAdministrative_Nomenclature_TypeEtablissement");

                    b.Navigation("CodeTypeEtabNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOrganisationPedagogique", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeEtablissement", "CodeTypeEtabNavigation")
                        .WithMany("NomenclatureOrganisationPedagogiques")
                        .HasForeignKey("CodeTypeEtab")
                        .HasConstraintName("FK_Nomenclature_OrganisationPedagogique_Nomenclature_TypeEtablissement");

                    b.Navigation("CodeTypeEtabNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRubriqueInspection", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCategorieRubriqueInspection", "CodeCateRubrInspNavigation")
                        .WithMany("NomenclatureRubriqueInspections")
                        .HasForeignKey("CodeCateRubrInsp")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_RubriqueInspection_Nomenclature_CategorieRubriqueInspection");

                    b.Navigation("CodeCateRubrInspNavigation");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSignalisation", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureConcerne", "CodeConcerneNavigation")
                        .WithMany("NomenclatureSignalisations")
                        .HasForeignKey("CodeConcerne")
                        .HasConstraintName("FK_Nomenclature_Signalisation_Nomenclature_Concerne");

                    b.HasOne("METABack.Entities.NomenclatureDelegation", "CodeDeleNavigation")
                        .WithMany("NomenclatureSignalisations")
                        .HasForeignKey("CodeDele")
                        .HasConstraintName("FK_Nomenclature_Signalisation_Nomenclature_Delegation");

                    b.HasOne("METABack.Entities.NomenclatureGouvernorat", "CodeGouvNavigation")
                        .WithMany("NomenclatureSignalisations")
                        .HasForeignKey("CodeGouv")
                        .HasConstraintName("FK_Nomenclature_Signalisation_Nomenclature_Gouve");

                    b.HasOne("METABack.Entities.NomenclatureInformateur", "CodeInformateurNavigation")
                        .WithMany("NomenclatureSignalisations")
                        .HasForeignKey("CodeInformateur")
                        .HasConstraintName("FK_Nomenclature_Signalisation_Nomenclature_Informateur");

                    b.HasOne("METABack.Entities.NomenclatureTypeSignalisation", "CodeTypeSignalisationNavigation")
                        .WithMany("NomenclatureSignalisations")
                        .HasForeignKey("CodeTypeSignalisation")
                        .HasConstraintName("FK_Nomenclature_Signalisation_Nomenclature_TypeSignalisation");

                    b.Navigation("CodeConcerneNavigation");

                    b.Navigation("CodeDeleNavigation");

                    b.Navigation("CodeGouvNavigation");

                    b.Navigation("CodeInformateurNavigation");

                    b.Navigation("CodeTypeSignalisationNavigation");
                });

            modelBuilder.Entity("METABack.Entities.ParametrageColumn", b =>
                {
                    b.HasOne("METABack.Entities.ParametrageNomenclature", "NumeNomeNavigation")
                        .WithMany("ParametrageColumns")
                        .HasForeignKey("NumeNome")
                        .IsRequired()
                        .HasConstraintName("FK_Parametrage_FkColumns_Parametrage_Nomenclature");

                    b.Navigation("NumeNomeNavigation");
                });

            modelBuilder.Entity("METABack.Entities.PersonnelFormationContinue", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureTypeFormation", "CodeTypeFormNavigation")
                        .WithMany("PersonnelFormationContinues")
                        .HasForeignKey("CodeTypeForm")
                        .HasConstraintName("FK_Personnel_FormationContinue_Nomenclature_TypeFormation");

                    b.HasOne("METABack.Entities.PersonnelPersonnel", "PersonnelPersonnel")
                        .WithMany("PersonnelFormationContinues")
                        .HasForeignKey("CodeEtab", "AnneScol", "IdenUniq")
                        .IsRequired()
                        .HasConstraintName("FK_Personnel_FormationContinue_Personnel_Personnel");

                    b.Navigation("CodeTypeFormNavigation");

                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.PersonnelPersonnel", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCorp", "CodeCorpNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeCorp")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Corps");

                    b.HasOne("METABack.Entities.NomenclatureDelegation", "CodeDeleNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeDele")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Delegation");

                    b.HasOne("METABack.Entities.NomenclatureDiplome", "CodeDiplNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeDipl")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Diplome");

                    b.HasOne("METABack.Entities.NomenclatureFonction", "CodeFoncNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeFonc")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Fonction");

                    b.HasOne("METABack.Entities.NomenclatureGenre", "CodeGenrNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeGenr")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Genre");

                    b.HasOne("METABack.Entities.NomenclatureGrade", "CodeGradNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeGrad")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Grade");

                    b.HasOne("METABack.Entities.NomenclatureNiveauEtude", "CodeNiveEtudNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeNiveEtud")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_NiveauEtude");

                    b.HasOne("METABack.Entities.NomenclatureQualite", "CodeQualNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeQual")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_Qualite");

                    b.HasOne("METABack.Entities.NomenclatureRevenuMensuel", "CodeReveMensNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeReveMens")
                        .HasConstraintName("FK_Personnel_Personnel_Nomenclature_RevenuMensuel");

                    b.HasOne("METABack.Entities.NomenclatureSituationProfessionel", "CodeSituProfNavigation")
                        .WithMany("PersonnelPersonnel")
                        .HasForeignKey("CodeSituProf")
                        .HasConstraintName("FK__Personnel__CodeS__2779CBAB");

                    b.Navigation("CodeCorpNavigation");

                    b.Navigation("CodeDeleNavigation");

                    b.Navigation("CodeDiplNavigation");

                    b.Navigation("CodeFoncNavigation");

                    b.Navigation("CodeGenrNavigation");

                    b.Navigation("CodeGradNavigation");

                    b.Navigation("CodeNiveEtudNavigation");

                    b.Navigation("CodeQualNavigation");

                    b.Navigation("CodeReveMensNavigation");

                    b.Navigation("CodeSituProfNavigation");
                });

            modelBuilder.Entity("METABack.Entities.ReclamationReclamation", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEtatReclamation", "CodeEtatReclNavigation")
                        .WithMany("ReclamationReclamations")
                        .HasForeignKey("CodeEtatRecl")
                        .HasConstraintName("FK_Reclamation_Reclamation_Nomenclature_EtatReclamation");

                    b.HasOne("METABack.Entities.NomenclaturePriorite", "CodePrioNavigation")
                        .WithMany("ReclamationReclamations")
                        .HasForeignKey("CodePrio")
                        .HasConstraintName("FK_Reclamation_Reclamation_Nomenclature_Priorite");

                    b.HasOne("METABack.Entities.EtablissementFicheEtablissement", "EtablissementFicheEtablissement")
                        .WithMany("ReclamationReclamations")
                        .HasForeignKey("CodeEtab", "AnneScol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Reclamation_Reclamation_Etablissement_FicheEtablissement");

                    b.Navigation("CodeEtatReclNavigation");

                    b.Navigation("CodePrioNavigation");

                    b.Navigation("EtablissementFicheEtablissement");
                });

            modelBuilder.Entity("METABack.Entities.ReclamationReclamationParent", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEtablissement", "CodeEtabNavigation")
                        .WithMany("ReclamationReclamationParents")
                        .HasForeignKey("CodeEtab")
                        .IsRequired()
                        .HasConstraintName("FK_Reclamation_ReclamationParent_Nomenclature_Etablissement");

                    b.HasOne("METABack.Entities.NomenclatureEtatReclamation", "CodeEtatReclNavigation")
                        .WithMany("ReclamationReclamationParents")
                        .HasForeignKey("CodeEtatRecl")
                        .HasConstraintName("FK_Reclamation_ReclamationParent_Nomenclature_EtatReclamation");

                    b.HasOne("METABack.Entities.NomenclaturePriorite", "CodePrioNavigation")
                        .WithMany("ReclamationReclamationParents")
                        .HasForeignKey("CodePrio")
                        .HasConstraintName("FK_Reclamation_ReclamationParent_Nomenclature_Priorite");

                    b.HasOne("METABack.Entities.SecuriteUtilisateur", "CodeutilNavigation")
                        .WithMany("ReclamationReclamationParents")
                        .HasForeignKey("Codeutil")
                        .HasConstraintName("FK_Reclamation_ReclamationParent_SECURITE_UTILISATEUR");

                    b.Navigation("CodeEtabNavigation");

                    b.Navigation("CodeEtatReclNavigation");

                    b.Navigation("CodePrioNavigation");

                    b.Navigation("CodeutilNavigation");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteDroitaccesgroupe", b =>
                {
                    b.HasOne("METABack.Entities.SecuriteEntite", "CodeentiNavigation")
                        .WithMany("SecuriteDroitaccesgroupes")
                        .HasForeignKey("Codeenti")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_DROITACCESGROUPE_S");

                    b.HasOne("METABack.Entities.SecuriteGroupeutilisateur", "CodegrouutilNavigation")
                        .WithMany("SecuriteDroitaccesgroupes")
                        .HasForeignKey("Codegrouutil")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_DROITACCESGROUP_26");

                    b.Navigation("CodeentiNavigation");

                    b.Navigation("CodegrouutilNavigation");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteDroitaccesutilisateur", b =>
                {
                    b.HasOne("METABack.Entities.SecuriteEntite", "CodeentiNavigation")
                        .WithMany("SecuriteDroitaccesutilisateurs")
                        .HasForeignKey("Codeenti")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_DROITACCESUTILISAT");

                    b.HasOne("METABack.Entities.SecuriteUtilisateur", "CodeutilNavigation")
                        .WithMany("SecuriteDroitaccesutilisateurs")
                        .HasForeignKey("Codeutil")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_DROITACCESUTILI_26");

                    b.Navigation("CodeentiNavigation");

                    b.Navigation("CodeutilNavigation");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteEntite", b =>
                {
                    b.HasOne("METABack.Entities.SecuritePackage", "CodepackNavigation")
                        .WithMany("SecuriteEntites")
                        .HasForeignKey("Codepack")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_ENTITE_SECURITE_PA");

                    b.Navigation("CodepackNavigation");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteSessionUtilisateur", b =>
                {
                    b.HasOne("METABack.Entities.SecuriteUtilisateur", "CodeUtilNavigation")
                        .WithOne("SecuriteSessionUtilisateur")
                        .HasForeignKey("METABack.Entities.SecuriteSessionUtilisateur", "CodeUtil")
                        .IsRequired()
                        .HasConstraintName("FK_Securite_SessionUtilisateur_SECURITE_UTILISATEUR");

                    b.Navigation("CodeUtilNavigation");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteTraceutilisateur", b =>
                {
                    b.HasOne("METABack.Entities.SecuriteTypeoperationtrace", "CodetypeoperNavigation")
                        .WithMany("SecuriteTraceutilisateurs")
                        .HasForeignKey("Codetypeoper")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_TRACEUTILISATEUR_SECURITE_TYPEOPERATIONTRACE");

                    b.HasOne("METABack.Entities.SecuriteUtilisateur", "CodeutilNavigation")
                        .WithMany("SecuriteTraceutilisateurs")
                        .HasForeignKey("Codeutil")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_TRACEUTILISATEUR_S");

                    b.Navigation("CodetypeoperNavigation");

                    b.Navigation("CodeutilNavigation");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteUtilisateur", b =>
                {
                    b.HasOne("METABack.Entities.SecuriteGroupeutilisateur", "CodegrouutilNavigation")
                        .WithMany("SecuriteUtilisateurs")
                        .HasForeignKey("Codegrouutil")
                        .IsRequired()
                        .HasConstraintName("FK_SECURITE_UTILISATEUR_SECURT");

                    b.HasOne("METABack.Entities.SecuriteNiveauhierarchique", "CodenivehierNavigation")
                        .WithMany("SecuriteUtilisateurs")
                        .HasForeignKey("Codenivehier")
                        .HasConstraintName("FK_SECURITE_UTILISATEUR_SECURI");

                    b.Navigation("CodegrouutilNavigation");

                    b.Navigation("CodenivehierNavigation");
                });

            modelBuilder.Entity("NomenclatureCategorieRubriqueTypeInspection", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureCategorieRubriqueInspection", null)
                        .WithMany()
                        .HasForeignKey("CodeCateRubrInsp")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_CategorieRubriqueTypeInspection_Nomenclature_CategorieRubriqueInspection");

                    b.HasOne("METABack.Entities.NomenclatureTypeInspection", null)
                        .WithMany()
                        .HasForeignKey("CodeTypeInsp")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_CategorieRubriqueTypeInspection_Nomenclature_TypeInspection");
                });

            modelBuilder.Entity("NomenclatureConstatationRubriqueInspection", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureConstatation", null)
                        .WithMany()
                        .HasForeignKey("CodeCons")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_ConstatationRubriqueInspection_Nomenclature_Constatation");

                    b.HasOne("METABack.Entities.NomenclatureRubriqueInspection", null)
                        .WithMany()
                        .HasForeignKey("CodeRubrInsp")
                        .IsRequired()
                        .HasConstraintName("FK_Nomenclature_ConstatationRubriqueInspection_Nomenclature_RubriqueInspection");
                });

            modelBuilder.Entity("SecuriteEtablissement", b =>
                {
                    b.HasOne("METABack.Entities.NomenclatureEtablissement", null)
                        .WithMany()
                        .HasForeignKey("CodeEtab")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Securite_Etablissement_Nomenclature_Etablissement");

                    b.HasOne("METABack.Entities.SecuriteUtilisateur", null)
                        .WithMany()
                        .HasForeignKey("Codeutil")
                        .IsRequired()
                        .HasConstraintName("FK_Securite_Etablissement_SECURITE_UTILISATEUR");
                });

            modelBuilder.Entity("METABack.Entities.EleveRepartitionGroupeTrancheAge", b =>
                {
                    b.Navigation("EleveRepartitionTrancheAges");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementEspace", b =>
                {
                    b.Navigation("EtablissementEspaceCaracteristiqueEspaces");
                });

            modelBuilder.Entity("METABack.Entities.EtablissementFicheEtablissement", b =>
                {
                    b.Navigation("EleveEleveHandicaps");

                    b.Navigation("EleveRepartitionEtatParents");

                    b.Navigation("EleveRepartitionEtatPsycologiques");

                    b.Navigation("EleveRepartitionEtatSantes");

                    b.Navigation("EleveRepartitionGroupeTrancheAges");

                    b.Navigation("EleveRepartitionLangueMaternelles");

                    b.Navigation("EleveRepartitionNationalites");

                    b.Navigation("EleveRepartitionNiveauEtudeMeres");

                    b.Navigation("EleveRepartitionNiveauEtudePeres");

                    b.Navigation("EleveRepartitionNiveauSalaires");

                    b.Navigation("EleveRepartitionProfessionMeres");

                    b.Navigation("EleveRepartitionProfessionPeres");

                    b.Navigation("EleveRepartitionTrancheAgeArretEtudes");

                    b.Navigation("EleveRepartitionTrancheAgeBeneficaires");

                    b.Navigation("EleveRepartitionTrancheAgeTypePriseEnCharges");

                    b.Navigation("EleveRepartitionTypeInscriptions");

                    b.Navigation("EleveRepartitionTypePriseEnCharges");

                    b.Navigation("EtablissementAnomalies");

                    b.Navigation("EtablissementEquipements");

                    b.Navigation("EtablissementEspaces");

                    b.Navigation("EtablissementInfrastructure");

                    b.Navigation("EtablissementInfrastructureAutres");

                    b.Navigation("EtablissementInterventions");

                    b.Navigation("ReclamationReclamations");
                });

            modelBuilder.Entity("METABack.Entities.InspectionVisiteInspection", b =>
                {
                    b.Navigation("InspectionConstatations");

                    b.Navigation("InspectionDeductionCategorieRubriqueInspections");

                    b.Navigation("InspectionEquipements");

                    b.Navigation("InspectionEspaces");

                    b.Navigation("InspectionInfoGenerale");

                    b.Navigation("InspectionNombreEnfantTrancheAges");

                    b.Navigation("InspectionRecifications");

                    b.Navigation("InspectionRepartitionHandicaps");

                    b.Navigation("InspectionRepartitionPersonelFonctions");

                    b.Navigation("InspectionRepartitionTrancheAges");
                });

            modelBuilder.Entity("METABack.Entities.MessageMessage", b =>
                {
                    b.Navigation("MessageUsers");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCaracteristiqueEspace", b =>
                {
                    b.Navigation("EtablissementEspaceCaracteristiqueEspaces");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCategorieRubriqueInspection", b =>
                {
                    b.Navigation("InspectionDeductionCategorieRubriqueInspections");

                    b.Navigation("NomenclatureRubriqueInspections");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCommune", b =>
                {
                    b.Navigation("EnfantNecessites");

                    b.Navigation("NomenclatureEtablissements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureConcerne", b =>
                {
                    b.Navigation("NomenclatureSignalisations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureCorp", b =>
                {
                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDedreHandicap", b =>
                {
                    b.Navigation("EleveEleveHandicaps");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDelegation", b =>
                {
                    b.Navigation("EnfantNecessites");

                    b.Navigation("EtablissementFicheEtablissements");

                    b.Navigation("NomenclatureEtablissementCodeDeleFondNavigations");

                    b.Navigation("NomenclatureEtablissementCodeDeleNavigations");

                    b.Navigation("NomenclatureSignalisations");

                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDiplome", b =>
                {
                    b.Navigation("NomenclatureEtablissements");

                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureDistrict", b =>
                {
                    b.Navigation("NomenclatureGouvernorats");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEmplacementSiege", b =>
                {
                    b.Navigation("EtablissementInfrastructures");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEquipement", b =>
                {
                    b.Navigation("EtablissementEquipements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtablissement", b =>
                {
                    b.Navigation("EtablissementFicheEtablissements");

                    b.Navigation("ReclamationReclamationParents");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatParent", b =>
                {
                    b.Navigation("EleveRepartitionEtatParents");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatPsycologique", b =>
                {
                    b.Navigation("EleveRepartitionEtatPsycologiques");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatReclamation", b =>
                {
                    b.Navigation("ReclamationReclamationParents");

                    b.Navigation("ReclamationReclamations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureEtatSante", b =>
                {
                    b.Navigation("EleveRepartitionEtatSantes");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureFonction", b =>
                {
                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGenre", b =>
                {
                    b.Navigation("EleveEleveHandicaps");

                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGouvernorat", b =>
                {
                    b.Navigation("NomenclatureDelegations");

                    b.Navigation("NomenclatureSignalisations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureGrade", b =>
                {
                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureInformateur", b =>
                {
                    b.Navigation("NomenclatureSignalisations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureInfrastrcture", b =>
                {
                    b.Navigation("EtablissementInfrastructureAutres");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureIntergrationHandicap", b =>
                {
                    b.Navigation("EleveEleveHandicaps");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureInterventionnecessaire", b =>
                {
                    b.Navigation("EtablissementInterventions");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureLangueMaternelle", b =>
                {
                    b.Navigation("EleveRepartitionLangueMaternelles");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNationalite", b =>
                {
                    b.Navigation("EleveRepartitionNationalites");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNiveauEtude", b =>
                {
                    b.Navigation("EleveRepartitionNiveauEtudeMeres");

                    b.Navigation("EleveRepartitionNiveauEtudePeres");

                    b.Navigation("NomenclatureEtablissements");

                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureNiveauSalaire", b =>
                {
                    b.Navigation("EleveRepartitionNiveauSalaires");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOrganisationAdministrative", b =>
                {
                    b.Navigation("EtablissementOrganisationAdministratives");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOrganisationPedagogique", b =>
                {
                    b.Navigation("EtablissementOrganisationPedagogiques");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureOuvertureEtablissement", b =>
                {
                    b.Navigation("EtablissementFicheEtablissements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclaturePriorite", b =>
                {
                    b.Navigation("ReclamationReclamationParents");

                    b.Navigation("ReclamationReclamations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureProfession", b =>
                {
                    b.Navigation("EleveRepartitionProfessionMeres");

                    b.Navigation("EleveRepartitionProfessionPeres");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureQualite", b =>
                {
                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRectification", b =>
                {
                    b.Navigation("InspectionRecifications");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRegimePropriete", b =>
                {
                    b.Navigation("EtablissementInfrastructures");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRevenuMensuel", b =>
                {
                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureRubriqueInspection", b =>
                {
                    b.Navigation("InspectionConstatations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSecteur", b =>
                {
                    b.Navigation("NomenclatureEtablissements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSituationFamiliale", b =>
                {
                    b.Navigation("NomenclatureEtablissements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureSituationProfessionel", b =>
                {
                    b.Navigation("PersonnelPersonnel");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTrancheAge", b =>
                {
                    b.Navigation("EleveRepartitionGroupeTrancheAges");

                    b.Navigation("EleveRepartitionTrancheAgeArretEtudes");

                    b.Navigation("EleveRepartitionTrancheAgeBeneficaires");

                    b.Navigation("EleveRepartitionTrancheAgeTypePriseEnCharges");

                    b.Navigation("InspectionNombreEnfantTrancheAges");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeCloture", b =>
                {
                    b.Navigation("EtablissementInfrastructures");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEquipement", b =>
                {
                    b.Navigation("NomenclatureEquipements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEspace", b =>
                {
                    b.Navigation("EtablissementEspaces");

                    b.Navigation("NomenclatureCaracteristiqueEspaces");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEtablissement", b =>
                {
                    b.Navigation("EnfantNecessites");

                    b.Navigation("NomenclatureCategorieRubriqueInspections");

                    b.Navigation("NomenclatureEtablissements");

                    b.Navigation("NomenclatureOrganisationAdministratives");

                    b.Navigation("NomenclatureOrganisationPedagogiques");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeEtatEtablissement", b =>
                {
                    b.Navigation("NomenclatureEtatEtablissements");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeFormation", b =>
                {
                    b.Navigation("PersonnelFormationContinues");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeHandicap", b =>
                {
                    b.Navigation("EleveEleveHandicaps");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeInscription", b =>
                {
                    b.Navigation("EleveRepartitionTypeInscriptions");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeInspection", b =>
                {
                    b.Navigation("InspectionVisiteInspections");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeMessage", b =>
                {
                    b.Navigation("MessageMessages");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypePriseEnCharge", b =>
                {
                    b.Navigation("EleveRepartitionTrancheAgeTypePriseEnCharges");

                    b.Navigation("EleveRepartitionTypePriseEnCharges");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypePropriete", b =>
                {
                    b.Navigation("EtablissementInfrastructures");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureTypeSignalisation", b =>
                {
                    b.Navigation("NomenclatureSignalisations");
                });

            modelBuilder.Entity("METABack.Entities.NomenclatureZone", b =>
                {
                    b.Navigation("NomenclatureEtablissements");
                });

            modelBuilder.Entity("METABack.Entities.ParametrageNomenclature", b =>
                {
                    b.Navigation("ParametrageColumns");
                });

            modelBuilder.Entity("METABack.Entities.PersonnelPersonnel", b =>
                {
                    b.Navigation("PersonnelFormationContinues");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteEntite", b =>
                {
                    b.Navigation("SecuriteDroitaccesgroupes");

                    b.Navigation("SecuriteDroitaccesutilisateurs");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteGroupeutilisateur", b =>
                {
                    b.Navigation("SecuriteDroitaccesgroupes");

                    b.Navigation("SecuriteUtilisateurs");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteNiveauhierarchique", b =>
                {
                    b.Navigation("SecuriteUtilisateurs");
                });

            modelBuilder.Entity("METABack.Entities.SecuritePackage", b =>
                {
                    b.Navigation("SecuriteEntites");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteTypeoperationtrace", b =>
                {
                    b.Navigation("SecuriteTraceutilisateurs");
                });

            modelBuilder.Entity("METABack.Entities.SecuriteUtilisateur", b =>
                {
                    b.Navigation("EtablissementAnomalies");

                    b.Navigation("ReclamationReclamationParents");

                    b.Navigation("SecuriteDroitaccesutilisateurs");

                    b.Navigation("SecuriteSessionUtilisateur");

                    b.Navigation("SecuriteTraceutilisateurs");
                });
#pragma warning restore 612, 618
        }
    }
}
